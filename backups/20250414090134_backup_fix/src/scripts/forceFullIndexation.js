/**
 * Script de scraping g√©n√©ral pour FloDrama PROD
 * 
 * Ce script lance un scraping complet des contenus populaires
 * et les indexe dans le service de recherche
 */

import dotenv from 'dotenv';
import smartScrapingService from '../services/SmartScrapingService.js';
import SearchIndexService from '../services/SearchIndexService.js';

// Charger les variables d'environnement
dotenv.config();

/**
 * Fonction principale qui lance le scraping g√©n√©ral
 */
async function runFullIndexation() {
  console.log('üîç D√©marrage du scraping g√©n√©ral pour FloDrama PROD...');
  console.log('‚öôÔ∏è Configuration de l\'environnement...');

  // Afficher les informations de configuration
  console.log(`- AWS_REGION: ${process.env.AWS_REGION || 'Non d√©fini'}`);
  console.log(`- AWS_OPENSEARCH_ENDPOINT: ${process.env.AWS_OPENSEARCH_ENDPOINT ? '‚úÖ D√©fini' : '‚ùå Non d√©fini'}`);
  console.log(`- ELASTICSEARCH_URL: ${process.env.ELASTICSEARCH_URL ? '‚úÖ D√©fini' : '‚ùå Non d√©fini'}`);
  console.log(`- REDIS_HOST: ${process.env.REDIS_HOST ? '‚úÖ D√©fini' : '‚ùå Non d√©fini'}`);

  try {
    // Lancer le scraping g√©n√©ral
    console.log('üöÄ Lancement du scraping g√©n√©ral...');
    const result = await smartScrapingService.forceFullIndexation();

    // Afficher les r√©sultats
    console.log('‚úÖ Scraping g√©n√©ral termin√© avec succ√®s !');
    console.log('üìä R√©sultats :');
    console.log(`- Total d'√©l√©ments index√©s : ${result.itemCounts.total}`);
    console.log(`- Dramas populaires : ${result.itemCounts.popular}`);
    console.log(`- Films populaires : ${result.itemCounts.movies}`);
    console.log(`- K-shows populaires : ${result.itemCounts.kshows}`);
    console.log(`- Animes populaires : ${result.itemCounts.animes}`);
    console.log(`- Dramas : ${result.itemCounts.dramas}`);

    // V√©rifier l'√©tat de l'index
    console.log('üîç V√©rification de l\'√©tat de l\'index...');
    const searchService = new SearchIndexService();
    const indexStats = await searchService.getIndexStats();
    console.log(`- Nombre total d'√©l√©ments dans l'index : ${indexStats.totalItems || 'Non disponible'}`);
    console.log(`- Type d'index utilis√© : ${indexStats.indexType || 'Non disponible'}`);

    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors du scraping g√©n√©ral :', error);
    throw error;
  }
}

// Ex√©cuter le script si appel√© directement
if (process.argv[1].includes('forceFullIndexation.js')) {
  runFullIndexation()
    .then(result => {
      console.log('‚ú® Script termin√© avec succ√®s !');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Erreur lors de l\'ex√©cution du script :', error);
      process.exit(1);
    });
}

export default runFullIndexation;
