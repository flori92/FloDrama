/**
 * Script d'initialisation et de test du syst√®me d'indexation
 * 
 * Ce script permet de :
 * 1. V√©rifier la connexion √† Elasticsearch/OpenSearch et Redis
 * 2. Cr√©er les index n√©cessaires s'ils n'existent pas
 * 3. Indexer un ensemble initial de donn√©es
 * 4. Tester les performances de recherche
 */

import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import SearchIndexService from '../services/SearchIndexService.js';

// Obtenir le chemin du r√©pertoire actuel (√©quivalent √† __dirname en CommonJS)
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement
dotenv.config();

/**
 * Fonction principale d'initialisation
 */
async function initialize() {
  console.log('üîç Initialisation du syst√®me d\'indexation...');
  
  try {
    // Afficher les informations de configuration
    console.log('\n=== Configuration ===');
    console.log('AWS_REGION:', process.env.AWS_REGION || 'Non d√©fini');
    console.log('AWS_OPENSEARCH_ENDPOINT:', process.env.AWS_OPENSEARCH_ENDPOINT ? 'Configur√©' : 'Non configur√©');
    console.log('ELASTICSEARCH_URL:', process.env.ELASTICSEARCH_URL || 'Non d√©fini');
    console.log('REDIS_HOST:', process.env.REDIS_HOST || 'Non d√©fini');
    console.log('Mode d√©grad√© activ√© si aucun service n\'est disponible');
    
    // Cr√©er une instance du service
    const searchService = new SearchIndexService();
    
    // V√©rifier l'√©tat du service
    console.log('\n=== V√©rification de l\'√©tat du service ===');
    const status = await searchService.healthCheck();
    
    console.log('√âtat d\'Elasticsearch:', status.elasticsearch ? 'Disponible' : 'Non disponible');
    console.log('√âtat de Redis:', status.redis ? 'Disponible' : 'Non disponible');
    console.log('Taille de l\'index:', status.indexSize, 'documents');
    console.log('Derni√®re mise √† jour:', status.lastUpdate ? new Date(status.lastUpdate).toLocaleString() : 'Jamais');
    
    if (!status.elasticsearch) {
      console.log('\n‚ö†Ô∏è Elasticsearch n\'est pas disponible, utilisation du mode d√©grad√©');
    }
    
    // Charger les donn√©es de test si l'index est vide
    if (status.indexSize === 0) {
      console.log('\n=== Chargement des donn√©es de test ===');
      
      // Charger les donn√©es de test depuis un fichier JSON
      const testDataPath = path.resolve(__dirname, '../data/sample_dramas.json');
      
      if (fs.existsSync(testDataPath)) {
        const testData = JSON.parse(fs.readFileSync(testDataPath, 'utf8'));
        console.log(`Chargement de ${testData.length} √©l√©ments depuis ${testDataPath}`);
        
        // Indexer les donn√©es
        const result = await searchService.indexItems(testData);
        console.log(`Indexation termin√©e: ${result.successful} √©l√©ments index√©s, ${result.failed} √©checs`);
      } else {
        console.error(`Fichier de donn√©es de test non trouv√©: ${testDataPath}`);
      }
    }
    
    // Effectuer une recherche de test
    console.log('\n=== Test de recherche ===');
    const testQuery = 'love';
    console.log(`Recherche de "${testQuery}"...`);
    
    const searchResults = await searchService.search(testQuery);
    console.log(`${searchResults.length} r√©sultats trouv√©s`);
    
    if (searchResults.length > 0) {
      console.log('Premier r√©sultat:', {
        title: searchResults[0].title,
        type: searchResults[0].type,
        source: searchResults[0].source
      });
    }
    
    // Test des suggestions
    console.log('\n=== Test des suggestions ===');
    const testPrefix = 'lo';
    console.log(`Suggestions pour "${testPrefix}"...`);
    
    const suggestions = await searchService.getSuggestions(testPrefix);
    console.log(`${suggestions.length} suggestions trouv√©es:`, suggestions.slice(0, 5));
    
    console.log('\n=== Initialisation termin√©e ===');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation:', error);
    process.exit(1);
  }
}

// Ex√©cuter la fonction d'initialisation
initialize().catch(console.error);
