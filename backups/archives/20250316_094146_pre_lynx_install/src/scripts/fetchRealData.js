/**
 * Script temporaire pour r√©cup√©rer des donn√©es r√©elles
 * et mettre √† jour le fichier sample_dramas.json
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import SmartScrapingService from '../services/SmartScrapingService.js';

// Charger les variables d'environnement
dotenv.config();

// Forcer l'utilisation du proxy local
process.env.USE_LOCAL_PROXY = 'true';

// Obtenir le chemin du r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Donn√©es d'exemple de fallback
const FALLBACK_DATA = [
  {
    id: "drama-1",
    title: "My Love From The Star",
    alternativeTitles: ["Î≥ÑÏóêÏÑú Ïò® Í∑∏ÎåÄ", "You Who Came From the Stars", "Man From the Stars"],
    link: "https://voirdrama.org/drama/my-love-from-the-star/",
    image: "https://voirdrama.org/assets/images/dramas/my-love-from-the-star.jpg",
    source: "VoirDrama",
    type: "drama",
    year: 2013,
    country: "Cor√©e du Sud"
  },
  {
    id: "drama-2",
    title: "Crash Landing on You",
    alternativeTitles: ["ÏÇ¨ÎûëÏùò Î∂àÏãúÏ∞©", "Love's Emergency Landing", "Emergency Love Landing"],
    link: "https://voirdrama.org/drama/crash-landing-on-you/",
    image: "https://voirdrama.org/assets/images/dramas/crash-landing-on-you.jpg",
    source: "VoirDrama",
    type: "drama",
    year: 2019,
    country: "Cor√©e du Sud"
  },
  {
    id: "drama-3",
    title: "Goblin",
    alternativeTitles: ["ÎèÑÍπ®ÎπÑ", "Guardian: The Lonely and Great God", "The Lonely and Great God"],
    link: "https://voirdrama.org/drama/goblin/",
    image: "https://voirdrama.org/assets/images/dramas/goblin.jpg",
    source: "VoirDrama",
    type: "drama",
    year: 2016,
    country: "Cor√©e du Sud"
  }
];

/**
 * Fonction pour r√©cup√©rer des donn√©es avec gestion des erreurs
 * @param {Function} fetchFunction - Fonction de r√©cup√©ration √† ex√©cuter
 * @param {String} type - Type de contenu (pour les logs)
 * @returns {Promise<Array>} Donn√©es r√©cup√©r√©es ou tableau vide en cas d'erreur
 */
async function fetchWithErrorHandling(fetchFunction, type) {
  try {
    const data = await fetchFunction();
    console.log(`‚úÖ ${data.length} ${type} r√©cup√©r√©s`);
    return data;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des ${type}:`, error.message);
    console.log(`‚ö†Ô∏è Utilisation des donn√©es de fallback pour les ${type}`);
    return [];
  }
}

/**
 * Fonction principale pour r√©cup√©rer les donn√©es et mettre √† jour le fichier
 */
async function fetchRealData() {
  console.log('üîç R√©cup√©ration des donn√©es r√©elles pour FloDrama PROD...');
  
  try {
    // R√©cup√©rer les donn√©es populaires avec gestion des erreurs
    console.log('üìä R√©cup√©ration des dramas populaires...');
    const popularDramas = await fetchWithErrorHandling(
      () => SmartScrapingService.getPopular(),
      'dramas populaires'
    );
    
    console.log('üé¨ R√©cup√©ration des films populaires...');
    const popularMovies = await fetchWithErrorHandling(
      () => SmartScrapingService.getPopularMovies(),
      'films populaires'
    );
    
    console.log('üì∫ R√©cup√©ration des K-shows populaires...');
    const popularKshows = await fetchWithErrorHandling(
      () => SmartScrapingService.getPopularKshows(),
      'K-shows populaires'
    );
    
    // Combiner les donn√©es
    let allData = [
      ...popularDramas,
      ...popularMovies,
      ...popularKshows
    ];
    
    // Si aucune donn√©e n'a √©t√© r√©cup√©r√©e, utiliser les donn√©es de fallback
    if (allData.length === 0) {
      console.warn('‚ö†Ô∏è Aucune donn√©e r√©elle r√©cup√©r√©e, utilisation des donn√©es de fallback');
      allData = FALLBACK_DATA;
    }
    
    // Limiter √† 50 √©l√©ments maximum pour √©viter un fichier trop volumineux
    const limitedData = allData.slice(0, 50);
    
    // Chemin du fichier sample_dramas.json
    const sampleDataPath = path.resolve(__dirname, '../data/sample_dramas.json');
    
    // Sauvegarder les donn√©es dans le fichier
    await fs.writeFile(sampleDataPath, JSON.stringify(limitedData, null, 2), 'utf8');
    
    console.log(`‚úÖ Fichier sample_dramas.json mis √† jour avec ${limitedData.length} √©l√©ments${allData === FALLBACK_DATA ? ' (donn√©es de fallback)' : ' r√©els'}`);
    console.log(`üìÅ Chemin du fichier: ${sampleDataPath}`);
    
    return limitedData;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error);
    
    // En cas d'erreur critique, utiliser quand m√™me les donn√©es de fallback
    try {
      const sampleDataPath = path.resolve(__dirname, '../data/sample_dramas.json');
      await fs.writeFile(sampleDataPath, JSON.stringify(FALLBACK_DATA, null, 2), 'utf8');
      console.log(`‚ö†Ô∏è Fichier sample_dramas.json mis √† jour avec des donn√©es de fallback`);
      return FALLBACK_DATA;
    } catch (fallbackError) {
      console.error('‚ùå Erreur critique lors de la sauvegarde des donn√©es de fallback:', fallbackError);
      throw error;
    }
  }
}

// Ex√©cuter le script si appel√© directement
if (process.argv[1].includes('fetchRealData.js')) {
  fetchRealData()
    .then(data => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Erreur lors de l\'ex√©cution du script:', error);
      process.exit(1);
    });
}

export default fetchRealData;
