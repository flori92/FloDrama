{"version":3,"file":"auth-CvLoGRuB.js","sources":["../../src/services/AuthService.js","../../src/hooks/useAuth.jsx"],"sourcesContent":["/**\n * Service d'authentification pour FloDrama\n * Gère l'authentification des utilisateurs, les tokens et les sessions\n */\nimport { API_BASE_URL, ENDPOINTS } from '../config/api';\n\nclass AuthService {\n  constructor() {\n    // Singleton pattern\n    if (AuthService.instance) {\n      return AuthService.instance;\n    }\n    \n    this.user = null;\n    this.token = localStorage.getItem('auth_token');\n    this.refreshToken = localStorage.getItem('refresh_token');\n    this.tokenExpiry = localStorage.getItem('token_expiry');\n    \n    AuthService.instance = this;\n  }\n\n  /**\n   * Vérifie si l'utilisateur est authentifié\n   * @returns {boolean} - True si l'utilisateur est authentifié\n   */\n  isAuthenticated() {\n    // Vérifier si le token existe et n'est pas expiré\n    if (!this.token) return false;\n    \n    if (this.tokenExpiry) {\n      const expiryDate = new Date(this.tokenExpiry);\n      if (expiryDate < new Date()) {\n        // Token expiré, essayer de le rafraîchir\n        this.refreshAuthToken();\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Récupère l'utilisateur actuellement connecté\n   * @returns {Object|null} - Informations sur l'utilisateur ou null si non connecté\n   */\n  getCurrentUser() {\n    return this.user;\n  }\n\n  /**\n   * Récupère le token d'authentification\n   * @returns {string|null} - Token d'authentification ou null\n   */\n  getAuthToken() {\n    return this.token;\n  }\n\n  /**\n   * Connecte un utilisateur avec email et mot de passe\n   * @param {string} email - Email de l'utilisateur\n   * @param {string} password - Mot de passe de l'utilisateur\n   * @returns {Promise<Object>} - Informations sur l'utilisateur connecté\n   */\n  async login(email, password) {\n    try {\n      // Simulation d'une requête API\n      // Dans un environnement réel, cela ferait une requête vers le backend\n      console.log(`[AuthService] Tentative de connexion pour ${email}`);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Simuler une réponse réussie\n      const response = {\n        user: {\n          id: 'user-123',\n          email: email,\n          name: 'Utilisateur Test',\n          avatar: 'https://via.placeholder.com/150',\n          preferences: {\n            theme: 'dark',\n            notifications: true\n          }\n        },\n        token: 'fake-jwt-token',\n        refreshToken: 'fake-refresh-token',\n        expiresIn: 3600 // 1 heure\n      };\n      \n      // Stocker les informations d'authentification\n      this.user = response.user;\n      this.token = response.token;\n      this.refreshToken = response.refreshToken;\n      \n      const expiryDate = new Date();\n      expiryDate.setSeconds(expiryDate.getSeconds() + response.expiresIn);\n      this.tokenExpiry = expiryDate.toISOString();\n      \n      // Sauvegarder dans le localStorage\n      localStorage.setItem('auth_token', this.token);\n      localStorage.setItem('refresh_token', this.refreshToken);\n      localStorage.setItem('token_expiry', this.tokenExpiry);\n      \n      return response.user;\n    } catch (error) {\n      console.error('[AuthService] Erreur lors de la connexion:', error);\n      throw new Error('Échec de la connexion: identifiants invalides');\n    }\n  }\n\n  /**\n   * Inscrit un nouvel utilisateur\n   * @param {string} name - Nom de l'utilisateur\n   * @param {string} email - Email de l'utilisateur\n   * @param {string} password - Mot de passe de l'utilisateur\n   * @returns {Promise<Object>} - Informations sur l'utilisateur inscrit\n   */\n  async register(name, email, password) {\n    try {\n      // Simulation d'une requête API\n      console.log(`[AuthService] Tentative d'inscription pour ${email}`);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Simuler une réponse réussie\n      const response = {\n        user: {\n          id: 'user-' + Date.now(),\n          email: email,\n          name: name,\n          avatar: 'https://via.placeholder.com/150',\n          preferences: {\n            theme: 'light',\n            notifications: true\n          }\n        },\n        token: 'fake-jwt-token-new-user',\n        refreshToken: 'fake-refresh-token-new-user',\n        expiresIn: 3600 // 1 heure\n      };\n      \n      // Stocker les informations d'authentification\n      this.user = response.user;\n      this.token = response.token;\n      this.refreshToken = response.refreshToken;\n      \n      const expiryDate = new Date();\n      expiryDate.setSeconds(expiryDate.getSeconds() + response.expiresIn);\n      this.tokenExpiry = expiryDate.toISOString();\n      \n      // Sauvegarder dans le localStorage\n      localStorage.setItem('auth_token', this.token);\n      localStorage.setItem('refresh_token', this.refreshToken);\n      localStorage.setItem('token_expiry', this.tokenExpiry);\n      \n      return response.user;\n    } catch (error) {\n      console.error('[AuthService] Erreur lors de l\\'inscription:', error);\n      throw new Error('Échec de l\\'inscription: veuillez réessayer');\n    }\n  }\n\n  /**\n   * Déconnecte l'utilisateur actuel\n   * @returns {Promise<void>}\n   */\n  async logout() {\n    try {\n      // Simulation d'une requête API pour la déconnexion\n      console.log('[AuthService] Déconnexion de l\\'utilisateur');\n      \n      // Nettoyer les données d'authentification\n      this.user = null;\n      this.token = null;\n      this.refreshToken = null;\n      this.tokenExpiry = null;\n      \n      // Supprimer du localStorage\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expiry');\n      \n      return true;\n    } catch (error) {\n      console.error('[AuthService] Erreur lors de la déconnexion:', error);\n      throw new Error('Échec de la déconnexion');\n    }\n  }\n\n  /**\n   * Rafraîchit le token d'authentification\n   * @returns {Promise<boolean>} - True si le token a été rafraîchi avec succès\n   */\n  async refreshAuthToken() {\n    if (!this.refreshToken) return false;\n    \n    try {\n      // Simulation d'une requête API pour rafraîchir le token\n      console.log('[AuthService] Rafraîchissement du token');\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Simuler une réponse réussie\n      const response = {\n        token: 'new-fake-jwt-token',\n        expiresIn: 3600 // 1 heure\n      };\n      \n      // Mettre à jour le token\n      this.token = response.token;\n      \n      const expiryDate = new Date();\n      expiryDate.setSeconds(expiryDate.getSeconds() + response.expiresIn);\n      this.tokenExpiry = expiryDate.toISOString();\n      \n      // Sauvegarder dans le localStorage\n      localStorage.setItem('auth_token', this.token);\n      localStorage.setItem('token_expiry', this.tokenExpiry);\n      \n      return true;\n    } catch (error) {\n      console.error('[AuthService] Erreur lors du rafraîchissement du token:', error);\n      \n      // En cas d'échec, déconnecter l'utilisateur\n      this.logout();\n      return false;\n    }\n  }\n\n  /**\n   * Réinitialise le mot de passe d'un utilisateur\n   * @param {string} email - Email de l'utilisateur\n   * @returns {Promise<boolean>} - True si la demande a été envoyée avec succès\n   */\n  async resetPassword(email) {\n    try {\n      // Simulation d'une requête API\n      console.log(`[AuthService] Demande de réinitialisation de mot de passe pour ${email}`);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      return true;\n    } catch (error) {\n      console.error('[AuthService] Erreur lors de la réinitialisation du mot de passe:', error);\n      throw new Error('Échec de la demande de réinitialisation');\n    }\n  }\n\n  /**\n   * Vérifie l'adresse email d'un utilisateur\n   * @param {string} token - Token de vérification\n   * @returns {Promise<boolean>} - True si la vérification a réussi\n   */\n  async verifyEmail(token) {\n    try {\n      // Simulation d'une requête API\n      console.log(`[AuthService] Vérification de l'email avec le token: ${token}`);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      return true;\n    } catch (error) {\n      console.error('[AuthService] Erreur lors de la vérification de l\\'email:', error);\n      throw new Error('Échec de la vérification de l\\'email');\n    }\n  }\n}\n\n// Exporter une instance du service\nexport default new AuthService();\n","import { useState, useEffect, createContext, useContext } from 'react';\n\n// Contexte d'authentification\nconst AuthContext = createContext({\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  login: () => {},\n  logout: () => {},\n  register: () => {},\n  error: null\n});\n\n// Provider d'authentification\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Vérification de l'état d'authentification au chargement\n  useEffect(() => {\n    // Simuler une vérification d'authentification\n    const checkAuth = async () => {\n      try {\n        // Vérifier si un token existe dans le localStorage\n        const token = localStorage.getItem('auth_token');\n        \n        if (token) {\n          // Simuler un utilisateur authentifié\n          setUser({\n            id: 'user-123',\n            name: 'Utilisateur Test',\n            email: 'user@example.com',\n            avatar: 'https://via.placeholder.com/150',\n            preferences: {\n              theme: 'dark',\n              notifications: true\n            }\n          });\n        }\n      } catch (err) {\n        console.error('Erreur lors de la vérification de l\\'authentification:', err);\n        setError('Impossible de vérifier l\\'authentification');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  // Fonction de connexion\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Simuler une connexion réussie\n      const user = {\n        id: 'user-123',\n        name: 'Utilisateur Test',\n        email: email,\n        avatar: 'https://via.placeholder.com/150',\n        preferences: {\n          theme: 'dark',\n          notifications: true\n        }\n      };\n      \n      // Stocker le token dans le localStorage\n      localStorage.setItem('auth_token', 'fake-jwt-token');\n      \n      setUser(user);\n      return user;\n    } catch (err) {\n      console.error('Erreur lors de la connexion:', err);\n      setError('Identifiants invalides');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fonction de déconnexion\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setUser(null);\n  };\n\n  // Fonction d'inscription\n  const register = async (name, email, password) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Simuler une inscription réussie\n      const user = {\n        id: 'user-' + Date.now(),\n        name: name,\n        email: email,\n        avatar: 'https://via.placeholder.com/150',\n        preferences: {\n          theme: 'dark',\n          notifications: true\n        }\n      };\n      \n      // Stocker le token dans le localStorage\n      localStorage.setItem('auth_token', 'fake-jwt-token');\n      \n      setUser(user);\n      return user;\n    } catch (err) {\n      console.error('Erreur lors de l\\'inscription:', err);\n      setError('Impossible de créer un compte');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        user, \n        isAuthenticated: !!user, \n        isLoading, \n        login, \n        logout, \n        register, \n        error \n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook personnalisé pour utiliser le contexte d'authentification\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default useAuth;\n"],"names":["AuthService","email","password","resolve","response","expiryDate","error","name","token","AuthService$1","AuthContext","createContext","useAuth","context","useContext"],"mappings":"wEAMA,MAAMA,CAAY,CAChB,aAAc,CAEZ,GAAIA,EAAY,SACd,OAAOA,EAAY,SAGrB,KAAK,KAAO,KACZ,KAAK,MAAQ,aAAa,QAAQ,YAAY,EAC9C,KAAK,aAAe,aAAa,QAAQ,eAAe,EACxD,KAAK,YAAc,aAAa,QAAQ,cAAc,EAEtDA,EAAY,SAAW,IAC3B,CAME,iBAAkB,CAEhB,OAAK,KAAK,MAEN,KAAK,aACY,IAAI,KAAK,KAAK,WAAW,EAC3B,IAAI,MAEnB,KAAK,iBAAkB,EAChB,IAIJ,GAXiB,EAY5B,CAME,gBAAiB,CACf,OAAO,KAAK,IAChB,CAME,cAAe,CACb,OAAO,KAAK,KAChB,CAQE,MAAM,MAAMC,EAAOC,EAAU,CAC3B,GAAI,CAGF,QAAQ,IAAI,6CAA6CD,CAAK,EAAE,EAGhE,MAAM,IAAI,QAAQE,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,MAAMC,EAAW,CACf,KAAM,CACJ,GAAI,WACJ,MAAOH,EACP,KAAM,mBACN,OAAQ,kCACR,YAAa,CACX,MAAO,OACP,cAAe,EAC3B,CACS,EACD,MAAO,iBACP,aAAc,qBACd,UAAW,IACZ,EAGD,KAAK,KAAOG,EAAS,KACrB,KAAK,MAAQA,EAAS,MACtB,KAAK,aAAeA,EAAS,aAE7B,MAAMC,EAAa,IAAI,KACvB,OAAAA,EAAW,WAAWA,EAAW,WAAU,EAAKD,EAAS,SAAS,EAClE,KAAK,YAAcC,EAAW,YAAa,EAG3C,aAAa,QAAQ,aAAc,KAAK,KAAK,EAC7C,aAAa,QAAQ,gBAAiB,KAAK,YAAY,EACvD,aAAa,QAAQ,eAAgB,KAAK,WAAW,EAE9CD,EAAS,IACjB,OAAQE,EAAO,CACd,cAAQ,MAAM,6CAA8CA,CAAK,EAC3D,IAAI,MAAM,+CAA+C,CACrE,CACA,CASE,MAAM,SAASC,EAAMN,EAAOC,EAAU,CACpC,GAAI,CAEF,QAAQ,IAAI,8CAA8CD,CAAK,EAAE,EAGjE,MAAM,IAAI,QAAQE,GAAW,WAAWA,EAAS,GAAI,CAAC,EAGtD,MAAMC,EAAW,CACf,KAAM,CACJ,GAAI,QAAU,KAAK,IAAK,EACxB,MAAOH,EACP,KAAMM,EACN,OAAQ,kCACR,YAAa,CACX,MAAO,QACP,cAAe,EAC3B,CACS,EACD,MAAO,0BACP,aAAc,8BACd,UAAW,IACZ,EAGD,KAAK,KAAOH,EAAS,KACrB,KAAK,MAAQA,EAAS,MACtB,KAAK,aAAeA,EAAS,aAE7B,MAAMC,EAAa,IAAI,KACvB,OAAAA,EAAW,WAAWA,EAAW,WAAU,EAAKD,EAAS,SAAS,EAClE,KAAK,YAAcC,EAAW,YAAa,EAG3C,aAAa,QAAQ,aAAc,KAAK,KAAK,EAC7C,aAAa,QAAQ,gBAAiB,KAAK,YAAY,EACvD,aAAa,QAAQ,eAAgB,KAAK,WAAW,EAE9CD,EAAS,IACjB,OAAQE,EAAO,CACd,cAAQ,MAAM,8CAAgDA,CAAK,EAC7D,IAAI,MAAM,4CAA6C,CACnE,CACA,CAME,MAAM,QAAS,CACb,GAAI,CAEF,eAAQ,IAAI,4CAA6C,EAGzD,KAAK,KAAO,KACZ,KAAK,MAAQ,KACb,KAAK,aAAe,KACpB,KAAK,YAAc,KAGnB,aAAa,WAAW,YAAY,EACpC,aAAa,WAAW,eAAe,EACvC,aAAa,WAAW,cAAc,EAE/B,EACR,OAAQA,EAAO,CACd,cAAQ,MAAM,+CAAgDA,CAAK,EAC7D,IAAI,MAAM,yBAAyB,CAC/C,CACA,CAME,MAAM,kBAAmB,CACvB,GAAI,CAAC,KAAK,aAAc,MAAO,GAE/B,GAAI,CAEF,QAAQ,IAAI,yCAAyC,EAGrD,MAAM,IAAI,QAAQH,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,MAAMC,EAAW,CACf,MAAO,qBACP,UAAW,IACZ,EAGD,KAAK,MAAQA,EAAS,MAEtB,MAAMC,EAAa,IAAI,KACvB,OAAAA,EAAW,WAAWA,EAAW,WAAU,EAAKD,EAAS,SAAS,EAClE,KAAK,YAAcC,EAAW,YAAa,EAG3C,aAAa,QAAQ,aAAc,KAAK,KAAK,EAC7C,aAAa,QAAQ,eAAgB,KAAK,WAAW,EAE9C,EACR,OAAQC,EAAO,CACd,eAAQ,MAAM,0DAA2DA,CAAK,EAG9E,KAAK,OAAQ,EACN,EACb,CACA,CAOE,MAAM,cAAcL,EAAO,CACzB,GAAI,CAEF,eAAQ,IAAI,kEAAkEA,CAAK,EAAE,EAGrF,MAAM,IAAI,QAAQE,GAAW,WAAWA,EAAS,GAAG,CAAC,EAE9C,EACR,OAAQG,EAAO,CACd,cAAQ,MAAM,oEAAqEA,CAAK,EAClF,IAAI,MAAM,yCAAyC,CAC/D,CACA,CAOE,MAAM,YAAYE,EAAO,CACvB,GAAI,CAEF,eAAQ,IAAI,wDAAwDA,CAAK,EAAE,EAG3E,MAAM,IAAI,QAAQL,GAAW,WAAWA,EAAS,GAAG,CAAC,EAE9C,EACR,OAAQG,EAAO,CACd,cAAQ,MAAM,2DAA6DA,CAAK,EAC1E,IAAI,MAAM,qCAAsC,CAC5D,CACA,CACA,CAGA,MAAeG,EAAA,IAAIT,EC9QbU,EAAcC,EAAAA,cAAc,CAChC,KAAM,KACN,gBAAiB,GACjB,UAAW,GACX,MAAO,IAAM,CAAC,EACd,OAAQ,IAAM,CAAC,EACf,SAAU,IAAM,CAAC,EACjB,MAAO,IACT,CAAC,EAgIYC,EAAU,IAAM,CACrB,MAAAC,EAAUC,aAAWJ,CAAW,EAEtC,GAAI,CAACG,EACG,MAAA,IAAI,MAAM,2DAA6D,EAGxE,OAAAA,CACT"}