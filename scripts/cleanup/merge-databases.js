#!/usr/bin/env node

/**
 * Script pour fusionner les bases de donn√©es redondantes
 * Ce script migre les donn√©es de flodrama-database vers flodrama-db
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const CONFIG = {
  // Utilisation des noms des bases de donn√©es
  sourceDb: 'flodrama-database',  // 7 tables
  targetDb: 'flodrama-db',        // 9 tables
  backupDir: path.join(__dirname, '../../backups')
};

// Cr√©er le dossier de sauvegarde si n√©cessaire
if (!fs.existsSync(CONFIG.backupDir)) {
  fs.mkdirSync(CONFIG.backupDir, { recursive: true });
}

/**
 * Ex√©cute une commande shell de mani√®re synchrone
 * @param {string} command - Commande √† ex√©cuter
 * @returns {string} Sortie de la commande
 */
function runCommand(command) {
  console.log(`Ex√©cution: ${command}`);
  try {
    const output = execSync(command, { stdio: 'inherit' });
    return output ? output.toString() : '';
  } catch (error) {
    console.error(`Erreur lors de l'ex√©cution: ${command}`);
    console.error(error.message);
    process.exit(1);
  }
}

/**
 * Sauvegarde une base de donn√©es
 * @param {string} dbName - Nom de la base de donn√©es
 */
function backupDatabase(dbName) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupFile = path.join(CONFIG.backupDir, `${dbName}-${timestamp}.sql`);
  
  console.log(`\nüîµ Sauvegarde de la base de donn√©es ${dbName}...`);
  runCommand(`npx wrangler d1 export ${dbName} --output=${backupFile}`);
  console.log(`‚úÖ Sauvegarde de ${dbName} termin√©e: ${backupFile}`);
  
  return backupFile;
}

/**
 * R√©cup√®re la liste des tables d'une base de donn√©es
 * @param {string} dbName - Nom de la base de donn√©es
 * @returns {string[]} Liste des noms de tables
 */
function getTableList(dbName) {
  console.log(`\nüîµ R√©cup√©ration des tables de ${dbName}...`);
  const output = runCommand(`npx wrangler d1 execute ${dbName} --command="SELECT name FROM sqlite_master WHERE type='table';" --json`);
  
  try {
    const result = JSON.parse(output);
    if (result && result.results && result.results.length > 0) {
      // V√©rifier si le r√©sultat est un tableau d'objets ou un tableau de tableaux
      if (Array.isArray(result.results[0])) {
        // Format: [{"name": "table1"}, {"name": "table2"}]
        return result.results[0]
          .map(row => row.name)
          .filter(name => name && name !== '_cf_METADATA');
      } else {
        // Format: [["table1"], ["table2"]]
        return result.results
          .map(row => row[0])
          .filter(name => name && name !== '_cf_METADATA');
      }
    }
  } catch (e) {
    console.error('Erreur lors de l\'analyse des tables:', e);
    console.error('Sortie brute:', output);
  }
  
  console.log('Aucune table trouv√©e dans la base source');
  return [];
}

/**
 * Point d'entr√©e principal
 */
async function main() {
  console.log('üöÄ D√©but de la fusion des bases de donn√©es');
  
  try {
    // 1. Sauvegarder les bases de donn√©es
    console.log('\nüì¶ Cr√©ation des sauvegardes...');
    backupDatabase(CONFIG.sourceDb);
    backupDatabase(CONFIG.targetDb);
    
    // 2. R√©cup√©rer la liste des tables de la source
    const tables = getTableList(CONFIG.sourceDb);
    
    if (tables.length === 0) {
      console.error('Aucune table trouv√©e dans la base source');
      return;
    }
    
    // 3. Afficher le r√©sum√© avant de commencer
    console.log('\nüîÑ D√©but de la fusion des donn√©es');
    console.log(`Source:      ${CONFIG.sourceDbName} (${CONFIG.sourceDb})`);
    console.log(`Destination: ${CONFIG.targetDbName} (${CONFIG.targetDb})`);
    console.log(`Tables √† fusionner: ${tables.join(', ')}`);
    console.log('\nD√©but de la fusion des tables...');
    
    for (const table of tables) {
      console.log(`\nüîÑ Fusion de la table ${table}...`);
      
      // Cr√©er un dump de la table source
      const dumpFile = path.join(CONFIG.backupDir, `dump-${table}.sql`);
      runCommand(`npx wrangler d1 execute ${CONFIG.sourceDb} --command=".output ${dumpFile}"`);
      runCommand(`npx wrangler d1 execute ${CONFIG.sourceDb} --command=".dump ${table}"`);
      
      // Importer dans la base cible
      runCommand(`npx wrangler d1 execute ${CONFIG.targetDb} --file=${dumpFile}`);
      
      // Supprimer le fichier temporaire
      fs.unlinkSync(dumpFile);
      
      console.log(`‚úÖ Table ${table} fusionn√©e avec succ√®s`);
    }
    
    console.log('\n‚ú® Fusion termin√©e avec succ√®s !');
    console.log(`Les donn√©es de ${CONFIG.sourceDb} ont √©t√© fusionn√©es dans ${CONFIG.targetDb}`);
    console.log(`Des sauvegardes ont √©t√© cr√©√©es dans: ${CONFIG.backupDir}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la fusion des bases de donn√©es:', error);
    process.exit(1);
  }
}

// Ex√©cution du script
if (require.main === module) {
  main();
}

module.exports = {
  backupDatabase,
  getTableList,
};
