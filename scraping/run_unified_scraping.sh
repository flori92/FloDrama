#!/bin/bash
# Script de lancement du scraping unifi√© pour FloDrama - Migration Supabase

# Cr√©ation du r√©pertoire de logs
mkdir -p logs

# Chargement des variables d'environnement
export SUPABASE_URL="https://fffgoqubrbgppcqqkyod.supabase.co"
export SUPABASE_SERVICE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZmZmdvcXVicmJncHBjcXFreW9kIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcxMDY3ODYxMSwiZXhwIjoyMDI2MjU0NjExfQ.MbJfYXbXKuBg2fJCwVdxB5pEU8cO1FjLnXtvQQFTg0k"
export SUPABASE_STORAGE_BUCKET="flodrama-images"
export MIN_ITEMS="200"

# V√©rification des variables d'environnement
if [ -z "$SUPABASE_SERVICE_KEY" ]; then
  echo "‚ùå Erreur : Variable d'environnement SUPABASE_SERVICE_KEY non d√©finie"
  exit 1
fi

echo "‚úÖ Variables d'environnement charg√©es"
echo "üîπ SUPABASE_URL: $SUPABASE_URL"
echo "üîπ SUPABASE_STORAGE_BUCKET: $SUPABASE_STORAGE_BUCKET"
echo "üîπ MIN_ITEMS: $MIN_ITEMS"

# Objectif : 200 items au total
total_items=0
target_items=200

# Lancement du scraping avec MyDramaList (priorit√© 1)
echo "üöÄ Lancement du scraping MyDramaList..."
python -m scraping.sources.mydramalist
items_mdl=$(cat scraping/logs/mydramalist_report_*.json | grep -o '"items_scraped": [0-9]*' | grep -o '[0-9]*' | sort -n | tail -1)
total_items=$((total_items + items_mdl))
echo "‚úÖ MyDramaList: $items_mdl items r√©cup√©r√©s. Total: $total_items/$target_items"

# Si on n'a pas atteint l'objectif, lancer VoirDrama (priorit√© 2)
if [ $total_items -lt $target_items ]; then
  remaining=$((target_items - total_items))
  export MIN_ITEMS="$remaining"
  echo "üöÄ Lancement du scraping VoirDrama (objectif: $remaining items)..."
  python -m scraping.sources.voirdrama
  items_vd=$(cat scraping/logs/voirdrama_report_*.json | grep -o '"items_scraped": [0-9]*' | grep -o '[0-9]*' | sort -n | tail -1)
  total_items=$((total_items + items_vd))
  echo "‚úÖ VoirDrama: $items_vd items r√©cup√©r√©s. Total: $total_items/$target_items"
fi

# Si on n'a pas atteint l'objectif, lancer Vostfree (priorit√© 3)
if [ $total_items -lt $target_items ] && [ -f "scraping/sources/vostfree.py" ]; then
  remaining=$((target_items - total_items))
  export MIN_ITEMS="$remaining"
  echo "üöÄ Lancement du scraping Vostfree (objectif: $remaining items)..."
  python -m scraping.sources.vostfree
  items_vf=$(cat scraping/logs/vostfree_report_*.json | grep -o '"items_scraped": [0-9]*' | grep -o '[0-9]*' | sort -n | tail -1)
  total_items=$((total_items + items_vf))
  echo "‚úÖ Vostfree: $items_vf items r√©cup√©r√©s. Total: $total_items/$target_items"
fi

# Si on n'a pas atteint l'objectif, lancer Dramacool (priorit√© 4)
if [ $total_items -lt $target_items ] && [ -f "scraping/sources/dramacool.py" ]; then
  remaining=$((target_items - total_items))
  export MIN_ITEMS="$remaining"
  echo "üöÄ Lancement du scraping Dramacool (objectif: $remaining items)..."
  python -m scraping.sources.dramacool
  items_dc=$(cat scraping/logs/dramacool_report_*.json | grep -o '"items_scraped": [0-9]*' | grep -o '[0-9]*' | sort -n | tail -1)
  total_items=$((total_items + items_dc))
  echo "‚úÖ Dramacool: $items_dc items r√©cup√©r√©s. Total: $total_items/$target_items"
fi

# R√©capitulatif final
if [ $total_items -ge $target_items ]; then
  echo "‚úÖ Objectif atteint! $total_items/$target_items items r√©cup√©r√©s au total."
else
  echo "‚ö†Ô∏è Objectif non atteint. $total_items/$target_items items r√©cup√©r√©s au total."
fi

echo "‚úÖ Scraping termin√© avec succ√®s"
