/**
 * G√©n√©rateur de fichiers par cat√©gorie pour FloDrama
 * 
 * Ce script organise les donn√©es scrap√©es en fichiers JSON par cat√©gorie
 * et g√©n√®re des index optimis√©s pour une distribution efficace.
 */

const fs = require('fs-extra');
const path = require('path');

// Configuration
const CONFIG = {
  INPUT_DIR: process.env.INPUT_DIR || './Frontend/src/data/content',
  OUTPUT_DIR: process.env.OUTPUT_DIR || './Frontend/src/data/content',
  CATEGORIES: ['drama', 'anime', 'film', 'bollywood'],
  MIN_ITEMS_PER_CATEGORY: parseInt(process.env.MIN_ITEMS_PER_CATEGORY || '100'),
  MAX_ITEMS_PER_FILE: parseInt(process.env.MAX_ITEMS_PER_FILE || '1000'),
  GENERATE_CHUNKS: process.env.GENERATE_CHUNKS === 'true',
  CHUNK_SIZE: parseInt(process.env.CHUNK_SIZE || '200'),
  INCLUDE_TRENDING: process.env.INCLUDE_TRENDING !== 'false',
  TRENDING_ITEMS_COUNT: parseInt(process.env.TRENDING_ITEMS_COUNT || '20'),
  INCLUDE_HERO_BANNER: process.env.INCLUDE_HERO_BANNER !== 'false',
  HERO_BANNER_ITEMS_COUNT: parseInt(process.env.HERO_BANNER_ITEMS_COUNT || '5')
};

/**
 * Fonction principale
 */
async function generateCategoryFiles() {
  console.log('='.repeat(80));
  console.log(`FloDrama - G√©n√©rateur de fichiers par cat√©gorie`);
  console.log('='.repeat(80));
  
  // Statistiques
  const stats = {
    total_items: 0,
    categories: {},
    start_time: new Date()
  };
  
  // Cr√©er les r√©pertoires n√©cessaires
  await fs.ensureDir(CONFIG.OUTPUT_DIR);
  
  // R√©cup√©rer tous les fichiers JSON sources
  const sourceFiles = await fs.readdir(CONFIG.INPUT_DIR);
  const jsonFiles = sourceFiles.filter(file => 
    file.endsWith('.json') && 
    !file.includes('index') && 
    !file.startsWith('.')
  );
  
  console.log(`\nüìÇ ${jsonFiles.length} fichiers sources trouv√©s`);
  
  // Collecter tous les √©l√©ments par cat√©gorie
  const categorizedItems = {};
  CONFIG.CATEGORIES.forEach(category => {
    categorizedItems[category] = [];
  });
  
  // Parcourir tous les fichiers sources
  for (const file of jsonFiles) {
    try {
      const filePath = path.join(CONFIG.INPUT_DIR, file);
      const data = await fs.readJson(filePath);
      
      // V√©rifier si les donn√©es sont un tableau ou un objet avec une propri√©t√© results
      const items = Array.isArray(data) ? data : (data.results || []);
      
      if (items.length === 0) {
        console.warn(`‚ö†Ô∏è Aucun √©l√©ment trouv√© dans ${file}`);
        continue;
      }
      
      console.log(`üìÑ Traitement de ${file}: ${items.length} √©l√©ments`);
      
      // Cat√©goriser les √©l√©ments
      items.forEach(item => {
        // D√©terminer la cat√©gorie de l'√©l√©ment
        let category = item.type || 'unknown';
        
        // Mapper les types sp√©cifiques aux cat√©gories g√©n√©rales
        if (['kdrama', 'cdrama', 'jdrama', 'drama', 'series'].includes(category)) {
          category = 'drama';
        } else if (['anime', 'animation'].includes(category)) {
          category = 'anime';
        } else if (['film', 'movie', 'movies'].includes(category)) {
          category = 'film';
        } else if (['bollywood', 'indian'].includes(category)) {
          category = 'bollywood';
        }
        
        // Ajouter l'√©l√©ment √† sa cat√©gorie si elle est support√©e
        if (CONFIG.CATEGORIES.includes(category)) {
          // Ajouter des propri√©t√©s utiles si elles n'existent pas
          const enhancedItem = {
            ...item,
            id: item.id || `${item.source}_${Math.random().toString(36).substring(2, 9)}`,
            type: category,
            created_at: item.created_at || new Date().toISOString(),
            updated_at: new Date().toISOString()
          };
          
          categorizedItems[category].push(enhancedItem);
        }
      });
      
      stats.total_items += items.length;
    } catch (error) {
      console.error(`‚ùå Erreur lors du traitement de ${file}: ${error.message}`);
    }
  }
  
  // G√©n√©rer les fichiers par cat√©gorie
  for (const category of CONFIG.CATEGORIES) {
    const items = categorizedItems[category];
    stats.categories[category] = items.length;
    
    if (items.length === 0) {
      console.warn(`‚ö†Ô∏è Aucun √©l√©ment pour la cat√©gorie ${category}`);
      continue;
    }
    
    console.log(`\nüì¶ G√©n√©ration des fichiers pour ${category}: ${items.length} √©l√©ments`);
    
    // Trier les √©l√©ments par ann√©e (d√©croissant) puis par note (d√©croissant)
    items.sort((a, b) => {
      if (b.year !== a.year) return b.year - a.year;
      return b.rating - a.rating;
    });
    
    // G√©n√©rer le fichier principal pour la cat√©gorie
    const categoryDir = path.join(CONFIG.OUTPUT_DIR, category);
    await fs.ensureDir(categoryDir);
    
    // G√©n√©rer le fichier index.json
    const indexFile = path.join(categoryDir, 'index.json');
    await fs.writeJson(indexFile, {
      count: items.length,
      results: items.slice(0, CONFIG.MAX_ITEMS_PER_FILE),
      updated_at: new Date().toISOString()
    }, { spaces: 2 });
    
    console.log(`‚úÖ Fichier index g√©n√©r√©: ${indexFile} (${Math.min(items.length, CONFIG.MAX_ITEMS_PER_FILE)} √©l√©ments)`);
    
    // G√©n√©rer des fichiers par chunks si n√©cessaire
    if (CONFIG.GENERATE_CHUNKS && items.length > CONFIG.CHUNK_SIZE) {
      const chunks = Math.ceil(items.length / CONFIG.CHUNK_SIZE);
      
      for (let i = 0; i < chunks; i++) {
        const start = i * CONFIG.CHUNK_SIZE;
        const end = Math.min(start + CONFIG.CHUNK_SIZE, items.length);
        const chunkItems = items.slice(start, end);
        
        const chunkFile = path.join(categoryDir, `chunk_${i + 1}.json`);
        await fs.writeJson(chunkFile, {
          count: chunkItems.length,
          results: chunkItems,
          chunk: i + 1,
          total_chunks: chunks,
          updated_at: new Date().toISOString()
        }, { spaces: 2 });
        
        console.log(`‚úÖ Chunk ${i + 1}/${chunks} g√©n√©r√©: ${chunkFile} (${chunkItems.length} √©l√©ments)`);
      }
    }
    
    // G√©n√©rer le fichier trending.json
    if (CONFIG.INCLUDE_TRENDING) {
      // S√©lectionner les √©l√©ments les plus r√©cents avec les meilleures notes
      const trendingItems = [...items]
        .sort((a, b) => {
          // Favoriser les √©l√©ments r√©cents (des 2 derni√®res ann√©es)
          const currentYear = new Date().getFullYear();
          const aIsRecent = a.year >= currentYear - 2;
          const bIsRecent = b.year >= currentYear - 2;
          
          if (aIsRecent !== bIsRecent) return aIsRecent ? -1 : 1;
          
          // Ensuite trier par note
          return b.rating - a.rating;
        })
        .slice(0, CONFIG.TRENDING_ITEMS_COUNT);
      
      const trendingFile = path.join(categoryDir, 'trending.json');
      await fs.writeJson(trendingFile, {
        count: trendingItems.length,
        results: trendingItems,
        updated_at: new Date().toISOString()
      }, { spaces: 2 });
      
      console.log(`‚úÖ Fichier trending g√©n√©r√©: ${trendingFile} (${trendingItems.length} √©l√©ments)`);
    }
    
    // G√©n√©rer le fichier hero_banner.json
    if (CONFIG.INCLUDE_HERO_BANNER) {
      // S√©lectionner les √©l√©ments r√©cents avec les meilleures notes et de bonnes images
      const heroBannerItems = [...items]
        .filter(item => item.backdrop && item.poster) // Uniquement les √©l√©ments avec images
        .sort((a, b) => {
          // Favoriser les √©l√©ments tr√®s r√©cents (de l'ann√©e en cours)
          const currentYear = new Date().getFullYear();
          const aIsVeryRecent = a.year >= currentYear;
          const bIsVeryRecent = b.year >= currentYear;
          
          if (aIsVeryRecent !== bIsVeryRecent) return aIsVeryRecent ? -1 : 1;
          
          // Ensuite trier par note
          return b.rating - a.rating;
        })
        .slice(0, CONFIG.HERO_BANNER_ITEMS_COUNT);
      
      const heroBannerFile = path.join(categoryDir, 'hero_banner.json');
      await fs.writeJson(heroBannerFile, {
        count: heroBannerItems.length,
        results: heroBannerItems,
        updated_at: new Date().toISOString()
      }, { spaces: 2 });
      
      console.log(`‚úÖ Fichier hero_banner g√©n√©r√©: ${heroBannerFile} (${heroBannerItems.length} √©l√©ments)`);
    }
  }
  
  // G√©n√©rer un fichier global pour toutes les cat√©gories
  const globalFile = path.join(CONFIG.OUTPUT_DIR, 'global.json');
  await fs.writeJson(globalFile, {
    total_items: stats.total_items,
    categories: stats.categories,
    updated_at: new Date().toISOString()
  }, { spaces: 2 });
  
  console.log(`\n‚úÖ Fichier global g√©n√©r√©: ${globalFile}`);
  
  // Calculer la dur√©e
  const duration = new Date() - stats.start_time;
  const durationFormatted = formatDuration(duration);
  
  // Afficher les statistiques
  console.log('\nüìä Statistiques:');
  console.log(`‚è±Ô∏è Dur√©e: ${durationFormatted}`);
  console.log(`üì¶ Total d'√©l√©ments: ${stats.total_items}`);
  
  for (const [category, count] of Object.entries(stats.categories)) {
    console.log(`- ${category}: ${count} √©l√©ments`);
  }
  
  return stats;
}

/**
 * Formate une dur√©e en millisecondes en format lisible
 * @param {number} ms - Dur√©e en millisecondes
 * @returns {string} - Dur√©e format√©e
 */
function formatDuration(ms) {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  
  if (hours > 0) {
    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
  } else if (minutes > 0) {
    return `${minutes}m ${seconds % 60}s`;
  } else {
    return `${seconds}s`;
  }
}

// Exporter la fonction pour utilisation dans d'autres scripts
module.exports = { generateCategoryFiles };

// Ex√©cuter la fonction principale si appel√© directement
if (require.main === module) {
  generateCategoryFiles()
    .then(() => {
      console.log('\n‚ú® G√©n√©ration des fichiers termin√©e avec succ√®s!');
      process.exit(0);
    })
    .catch(error => {
      console.error(`\n‚ùå Erreur lors de la g√©n√©ration des fichiers: ${error.message}`);
      process.exit(1);
    });
}
