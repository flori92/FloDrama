name: CI/CD FloDrama

on:
  push:
    branches: [main, gh-pages]
  workflow_dispatch:

jobs:
  backend:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      
      - name: Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Installation des dépendances Python
        run: |
          python -m pip install --upgrade pip
          if [ -f Backend/requirements.txt ]; then
            pip install -r Backend/requirements.txt
          else
            pip install aiohttp beautifulsoup4 boto3 fastapi pymongo redis opensearch-py pydantic
          fi
      
      - name: Installation des dépendances Node.js
        run: npm ci
      
      - name: Configuration AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Exécution du scraping et export des données
        run: |
          echo " Lancement du scraping et de l'export des données..."
          
          # Création du répertoire de sortie
          mkdir -p export_data
          
          # Exécution du scraping avec le service Python
          python -c "
          import sys
          sys.path.append('./Backend')
          from src.services.ScrapingService import ScrapingService
          from src.config.scraping_config import SCRAPING_CONFIG
          
          # Initialisation du service de scraping
          scraper = ScrapingService(config=SCRAPING_CONFIG)
          
          # Exécution du scraping pour chaque source
          results = scraper.scrape_all_sources()
          
          # Export des résultats au format JSON
          scraper.export_to_json('./export_data/content.json')
          
          # Création de fichiers spécifiques pour le frontend
          scraper.export_categories('./export_data/categories.json')
          scraper.export_featured('./export_data/featured.json')
          scraper.export_popular('./export_data/popular.json')
          scraper.export_recently_added('./export_data/recently.json')
          scraper.export_top_rated('./export_data/topRated.json')
          
          print(f' Scraping terminé avec succès: {len(results)} éléments récupérés')
          "
          
          # Vérification des fichiers générés
          ls -la export_data/
          
          # Upload des données vers S3
          echo " Upload des données vers S3..."
          aws s3 sync export_data/ s3://flodrama-content-1745269660/data/ --acl public-read --cache-control "max-age=3600"
          
          # Invalidation du cache CloudFront
          echo " Invalidation du cache CloudFront..."
          aws cloudfront create-invalidation --distribution-id $(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Aliases.Items, 'flodrama')].Id" --output text) --paths "/data/*"
          
          echo " Export des données terminé avec succès!"
      
      - name: Déploiement de la fonction Lambda
        run: |
          echo " Déploiement de la fonction Lambda FloDramaAPI..."
          
          # Vérifier si la fonction Lambda existe déjà
          LAMBDA_EXISTS=$(aws lambda list-functions --query "Functions[?FunctionName=='FloDramaAPI'].FunctionName" --output text || echo "")
          
          if [ -z "$LAMBDA_EXISTS" ]; then
            echo "Création de la fonction Lambda FloDramaAPI..."
            
            # Création d'un répertoire temporaire pour le déploiement
            mkdir -p lambda_package
            
            # Préparation du code Lambda
            cp -r Backend/src/lambda/* lambda_package/
            
            # Installation des dépendances dans le package
            cd lambda_package
            npm install --production
            zip -r ../lambda_package.zip .
            cd ..
            
            # Création de la fonction Lambda
            aws lambda create-function \
              --function-name FloDramaAPI \
              --runtime nodejs18.x \
              --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
              --handler index.handler \
              --timeout 30 \
              --memory-size 512 \
              --zip-file fileb://lambda_package.zip \
              --environment Variables="{NODE_ENV=production,S3_BUCKET=flodrama-content-1745269660,FRONTEND_URL=https://flori92.github.io/FloDrama}"
          else
            echo "Mise à jour de la fonction Lambda FloDramaAPI..."
            
            # Préparation du code Lambda
            mkdir -p lambda_package
            cp -r Backend/src/lambda/* lambda_package/
            
            # Installation des dépendances dans le package
            cd lambda_package
            npm install --production
            zip -r ../lambda_package.zip .
            cd ..
            
            # Mise à jour du code de la fonction Lambda
            aws lambda update-function-code \
              --function-name FloDramaAPI \
              --zip-file fileb://lambda_package.zip
              
            # Mise à jour de la configuration de la fonction Lambda
            aws lambda update-function-configuration \
              --function-name FloDramaAPI \
              --timeout 30 \
              --memory-size 512 \
              --environment Variables="{NODE_ENV=production,S3_BUCKET=flodrama-content-1745269660,FRONTEND_URL=https://flori92.github.io/FloDrama}"
          fi
          
          # Nettoyage des ressources Lambda inutilisées
          echo " Nettoyage des anciennes versions Lambda..."
          
          # Liste des versions sauf $LATEST et les 3 plus récentes
          VERSIONS_TO_DELETE=$(aws lambda list-versions-by-function --function-name FloDramaAPI --query "Versions[?Version!='$LATEST'].Version" --output text | tr '\t' '\n' | sort -n | head -n -3)
          
          # Suppression des anciennes versions
          for VERSION in $VERSIONS_TO_DELETE; do
            echo "Suppression de la version $VERSION..."
            aws lambda delete-function --function-name FloDramaAPI:$VERSION || true
          done
          
          # Configuration de la rétention des logs CloudWatch
          echo " Configuration de la rétention des logs CloudWatch..."
          aws logs put-retention-policy --log-group-name /aws/lambda/FloDramaAPI --retention-in-days 30
          
          echo " Déploiement Lambda terminé avec succès!"
      
      - name: Notification backend
        run: echo " Backend (S3/CDN/Lambda) déployé avec succès"

  frontend:
    if: github.ref == 'refs/heads/gh-pages' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        
      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Installation des dépendances
        working-directory: ./Frontend
        run: |
          echo " Installation des dépendances frontend..."
          npm ci
          
      - name: Suppression des fichiers statiques obsolètes
        working-directory: ./Frontend
        run: |
          echo " Suppression des fichiers statiques obsolètes..."
          # Supprimer les fichiers HTML statiques obsolètes
          find public -name "*.html" ! -name "index.html" -type f -delete
          
          # Supprimer les anciennes pages statiques
          rm -rf public/static || true
          
          # S'assurer que l'index.html est bien configuré pour l'application React
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="fr">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <meta http-equiv="X-UA-Compatible" content="ie=edge" />
              <meta name="description" content="FloDrama - Streaming de Dramas et Films Asiatiques" />
              <meta name="theme-color" content="#3b82f6" />
              <meta name="apple-mobile-web-app-capable" content="yes" />
              <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
              <meta name="apple-mobile-web-app-title" content="FloDrama" />
              <meta property="og:title" content="FloDrama - Streaming de Dramas et Films Asiatiques" />
              <meta property="og:description" content="Découvrez les meilleurs dramas et films asiatiques en streaming HD" />
              <meta property="og:image" content="/logo512.png" />
              <meta property="og:url" content="https://flodrama.com" />
              <meta property="og:type" content="website" />
              <meta name="twitter:card" content="summary_large_image" />
              <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
              <link rel="apple-touch-icon" href="/logo192.png" />
              <link rel="manifest" href="/manifest.json" />
              <title>FloDrama - Streaming de Dramas et Films Asiatiques</title>
              
              <!-- Préchargement des polices -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              
              <!-- Styles pour éviter le FOUC (Flash of Unstyled Content) -->
              <style>
                body {
                  background-color: #000000;
                  color: #FFFFFF;
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                  margin: 0;
                  padding: 0;
                }
                
                /* Dégradé signature FloDrama */
                .gradient-signature {
                  background: linear-gradient(to right, #3b82f6, #d946ef);
                  -webkit-background-clip: text;
                  background-clip: text;
                  color: transparent;
                }
                
                /* Animation de chargement avec le dégradé signature */
                #loading {
                  position: fixed;
                  top: 0;
                  left: 0;
                  right: 0;
                  bottom: 0;
                  display: flex;
                  flex-direction: column;
                  align-items: center;
                  justify-content: center;
                  background-color: #000000;
                  z-index: 9999;
                }
                
                .loading-logo {
                  font-size: 2.5rem;
                  font-weight: 600;
                  margin-bottom: 2rem;
                }
                
                .loading-spinner {
                  width: 50px;
                  height: 50px;
                  border: 3px solid rgba(255, 255, 255, 0.1);
                  border-radius: 50%;
                  border-top-color: #3b82f6;
                  border-right-color: #8b5cf6;
                  border-bottom-color: #d946ef;
                  animation: spin 1s ease-in-out infinite;
                }
                
                @keyframes spin {
                  to { transform: rotate(360deg); }
                }
              </style>
            </head>
            <body>
              <!-- Écran de chargement stylisé -->
              <div id="loading">
                <div class="loading-logo gradient-signature">FloDrama</div>
                <div class="loading-spinner"></div>
              </div>
              
              <div id="root"></div>
              
              <script>
                // Masquer l'écran de chargement une fois l'application chargée
                window.addEventListener('load', function() {
                  setTimeout(function() {
                    document.getElementById('loading').style.opacity = '0';
                    document.getElementById('loading').style.transition = 'opacity 0.5s ease';
                    setTimeout(function() {
                      document.getElementById('loading').style.display = 'none';
                    }, 500);
                  }, 500);
                });
              </script>
              
              <script type="module" src="/src/main.tsx"></script>
            </body>
          </html>
          EOF
          
      - name: Vérification de la configuration Tailwind
        working-directory: ./Frontend
        run: |
          echo " Vérification de la configuration Tailwind CSS..."
          
          # Vérification et mise à jour de tailwind.config.js si nécessaire
          if [ -f tailwind.config.js ]; then
            # S'assurer que la configuration contient les couleurs du dégradé signature
            if ! grep -q "blue-500" tailwind.config.js || ! grep -q "fuchsia-500" tailwind.config.js; then
              echo " Mise à jour de la configuration Tailwind avec les couleurs de la charte graphique..."
              cat > tailwind.config.js << 'EOF'
              /** @type {import('tailwindcss').Config} */
              module.exports = {
                darkMode: ["class"],
                content: [
                  './pages/**/*.{ts,tsx}',
                  './components/**/*.{ts,tsx}',
                  './src/**/*.{ts,tsx}',
                ],
                theme: {
                  container: {
                    center: true,
                    padding: "2rem",
                    screens: {
                      "2xl": "1400px",
                    },
                  },
                  extend: {
                    colors: {
                      border: "hsl(var(--border))",
                      input: "hsl(var(--input))",
                      ring: "hsl(var(--ring))",
                      background: "hsl(var(--background))",
                      foreground: "hsl(var(--foreground))",
                      primary: {
                        DEFAULT: "hsl(var(--primary))",
                        foreground: "hsl(var(--primary-foreground))",
                      },
                      secondary: {
                        DEFAULT: "hsl(var(--secondary))",
                        foreground: "hsl(var(--secondary-foreground))",
                      },
                      destructive: {
                        DEFAULT: "hsl(var(--destructive))",
                        foreground: "hsl(var(--destructive-foreground))",
                      },
                      muted: {
                        DEFAULT: "hsl(var(--muted))",
                        foreground: "hsl(var(--muted-foreground))",
                      },
                      accent: {
                        DEFAULT: "hsl(var(--accent))",
                        foreground: "hsl(var(--accent-foreground))",
                      },
                      popover: {
                        DEFAULT: "hsl(var(--popover))",
                        foreground: "hsl(var(--popover-foreground))",
                      },
                      card: {
                        DEFAULT: "hsl(var(--card))",
                        foreground: "hsl(var(--card-foreground))",
                      },
                    },
                    borderRadius: {
                      lg: "var(--radius)",
                      md: "calc(var(--radius) - 2px)",
                      sm: "calc(var(--radius) - 4px)",
                    },
                    keyframes: {
                      "accordion-down": {
                        from: { height: 0 },
                        to: { height: "var(--radix-accordion-content-height)" },
                      },
                      "accordion-up": {
                        from: { height: "var(--radix-accordion-content-height)" },
                        to: { height: 0 },
                      },
                    },
                    animation: {
                      "accordion-down": "accordion-down 0.2s ease-out",
                      "accordion-up": "accordion-up 0.2s ease-out",
                    },
                  },
                },
                plugins: [require("tailwindcss-animate")],
              }
              EOF
            fi
          fi
          
          # Vérification et mise à jour de globals.css si nécessaire
          if [ -f src/styles/globals.css ]; then
            # S'assurer que le fichier contient les variables CSS pour le dégradé signature
            if ! grep -q "from-blue-500 to-fuchsia-500" src/styles/globals.css; then
              echo " Mise à jour des styles globaux avec le dégradé signature..."
              cat >> src/styles/globals.css << 'EOF'
              
              /* Dégradé signature FloDrama */
              .gradient-signature {
                @apply bg-gradient-to-r from-blue-500 to-fuchsia-500;
              }
              
              /* Variables de couleur FloDrama */
              :root {
                --background: 0 0% 0%; /* #000000 */
                --foreground: 0 0% 100%; /* #FFFFFF */
                --primary-gradient-from: 217 91% 60%; /* blue-500 */
                --primary-gradient-to: 292 84% 61%; /* fuchsia-500 */
                --border-opacity: 0.3;
              }
              EOF
            fi
          fi
          
      - name: Exclusion des modules Node.js du build frontend
        working-directory: ./Frontend
        run: |
          echo " Configuration du build pour exclure les modules Node.js..."
          
          # Créer un fichier temporaire qui exclut les imports problématiques
          cat > vite.config.temp.js << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          import path from 'path'
          
          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'build',
              assetsDir: 'assets',
              sourcemap: false,
              minify: 'terser',
              terserOptions: {
                compress: {
                  drop_console: true,
                },
              },
              rollupOptions: {
                external: ['path', 'worker_threads', 'fs', 'os', 'child_process'],
                output: {
                  manualChunks: {
                    'vendor': ['react', 'react-dom', 'react-router-dom', 'framer-motion'],
                    'ui': ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu', '@radix-ui/react-toast'],
                  }
                }
              },
            },
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src'),
                // Remplacer les modules Node.js par des stubs vides
                'worker_threads': './src/stubs/empty.js',
                'path': './src/stubs/empty.js',
                'fs': './src/stubs/empty.js',
              }
            },
            server: {
              port: 3000,
              strictPort: true,
              host: true
            },
            base: '/FloDrama/'
          })
          EOF
          
          # Créer le répertoire stubs s'il n'existe pas
          mkdir -p src/stubs
          
          # Créer un stub vide
          echo "export default {};" > src/stubs/empty.js
          
          # Remplacer le fichier de configuration Vite existant
          if [ -f vite.config.js ]; then
            mv vite.config.temp.js vite.config.js
          elif [ -f vite.config.ts ]; then
            mv vite.config.temp.js vite.config.js
          else
            mv vite.config.temp.js vite.config.js
          fi
          
          # Vérifier si SmartScrapingService est importé dans le frontend et créer une version compatible navigateur
          if grep -q "SmartScrapingService" src/components/*.{js,jsx,ts,tsx} src/pages/*.{js,jsx,ts,tsx} 2>/dev/null; then
            echo " Création d'une version compatible navigateur de SmartScrapingService..."
            echo "// Version compatible navigateur de SmartScrapingService" > src/services/SmartScrapingService.browser.js
            echo "export class SmartScrapingService {" >> src/services/SmartScrapingService.browser.js
            echo "  constructor() { console.log('SmartScrapingService: version navigateur'); }" >> src/services/SmartScrapingService.browser.js
            echo "  async updateContentDatabase() { return { success: true, message: 'API call required' }; }" >> src/services/SmartScrapingService.browser.js
            echo "}" >> src/services/SmartScrapingService.browser.js
            echo "export default SmartScrapingService;" >> src/services/SmartScrapingService.browser.js
            
            # Remplacer les imports dans les fichiers frontend
            find src -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | xargs sed -i 's/from "\.\.\/services\/SmartScrapingService"/from "\.\.\/services\/SmartScrapingService.browser"/g' 2>/dev/null || true
            find src -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | xargs sed -i "s/from '\.\.\/services\/SmartScrapingService'/from '\.\.\/services\/SmartScrapingService.browser'/g" 2>/dev/null || true
          fi
          
      - name: Vérification de la configuration des données
        working-directory: ./Frontend
        run: |
          echo " Vérification de la configuration des données..."
          
          # Vérifier si le fichier de configuration des données existe
          if [ -f src/config/data.ts ]; then
            # S'assurer que les URLs pointent vers le bucket S3 public
            echo " Mise à jour des URLs de données pour pointer vers S3..."
            cat > src/config/data.ts << 'EOF'
            /**
             * Configuration des sources de données pour FloDrama
             * Dernière mise à jour: $(date +"%d/%m/%Y")
             */
            
            const S3_BASE_URL = 'https://flodrama-content-1745269660.s3.amazonaws.com/data';
            const CDN_BASE_URL = 'https://d1pbqs2b6em4ha.cloudfront.net/data';
            
            export const DATA_URLS = {
              // Utiliser le CDN comme source primaire pour de meilleures performances
              featured: `${CDN_BASE_URL}/featured.json`,
              popular: `${CDN_BASE_URL}/popular.json`,
              recently: `${CDN_BASE_URL}/recently.json`,
              topRated: `${CDN_BASE_URL}/topRated.json`,
              categories: `${CDN_BASE_URL}/categories.json`,
              content: `${CDN_BASE_URL}/content.json`,
              
              // URLs de fallback en cas de problème avec le CDN
              fallback: {
                featured: `${S3_BASE_URL}/featured.json`,
                popular: `${S3_BASE_URL}/popular.json`,
                recently: `${S3_BASE_URL}/recently.json`,
                topRated: `${S3_BASE_URL}/topRated.json`,
                categories: `${S3_BASE_URL}/categories.json`,
                content: `${S3_BASE_URL}/content.json`,
              }
            };
            
            export const BASE_DATA_URL = CDN_BASE_URL + '/';
            
            export default DATA_URLS;
            EOF
          fi
          
      - name: Build frontend
        working-directory: ./Frontend
        run: |
          echo " Construction du frontend..."
          # Forcer le mode production
          export NODE_ENV=production
          npm run build
        env:
          REACT_APP_API_ENDPOINT: 'https://d1pbqs2b6em4ha.cloudfront.net'
          REACT_APP_CDN_ENDPOINT: 'https://d1pbqs2b6em4ha.cloudfront.net'
          REACT_APP_ENVIRONMENT: 'production'
          NODE_ENV: 'production'
          # Ajouter une variable pour forcer la reconstruction complète
          VITE_FORCE_REBUILD: '$(date +%s)'
          
      - name: Préparation pour GitHub Pages
        working-directory: ./Frontend
        run: |
          echo " Préparation des fichiers pour GitHub Pages..."
          
          # Création du fichier .nojekyll pour désactiver le processus Jekyll
          touch build/.nojekyll
          
          # Création d'un fichier 404.html personnalisé
          cat > build/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="fr">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Page non trouvée - FloDrama</title>
            <style>
              body {
                font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background-color: #000000;
                color: #FFFFFF;
                margin: 0;
                padding: 0;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
                text-align: center;
              }
              .container {
                max-width: 800px;
                padding: 2rem;
              }
              h1 {
                background: linear-gradient(to right, #3b82f6, #d946ef);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                font-size: 3rem;
                margin-bottom: 1rem;
              }
              p {
                font-size: 1.2rem;
                margin-bottom: 2rem;
              }
              .btn {
                display: inline-block;
                background: #FFFFFF;
                color: #000000;
                padding: 0.75rem 1.5rem;
                border-radius: 0.5rem;
                text-decoration: none;
                font-weight: bold;
                transition: opacity 0.3s ease;
              }
              .btn:hover {
                opacity: 0.8;
              }
            </style>
            <script>
              // Redirection vers la page d'accueil après 5 secondes
              setTimeout(function() {
                window.location.href = '/FloDrama/';
              }, 5000);
            </script>
          </head>
          <body>
            <div class="container">
              <h1>Page non trouvée</h1>
              <p>La page que vous recherchez n'existe pas ou a été déplacée.</p>
              <a href="/FloDrama/" class="btn">Retour à l'accueil</a>
            </div>
          </body>
          </html>
          EOF
          
          # Copier index.html vers 200.html pour le routage SPA
          cp build/index.html build/200.html
          
      - name: Déploiement sur GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: Frontend/build
          branch: gh-pages
          clean: true
          clean-exclude: |
            .gitignore
            CNAME
          
      - name: Notification frontend
        run: |
          echo " Frontend déployé sur GitHub Pages avec succès!"
          echo " URL: https://flori92.github.io/FloDrama/"
