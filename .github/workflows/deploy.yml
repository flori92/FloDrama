name: CI/CD FloDrama

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Permissions n√©cessaires pour GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  backend:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      
      - name: Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Backend/package-lock.json
      
      - name: Installation des d√©pendances Python
        run: |
          python -m pip install --upgrade pip
          if [ -f Backend/requirements.txt ]; then
            pip install -r Backend/requirements.txt
          else
            pip install aiohttp beautifulsoup4 boto3 fastapi pymongo redis opensearch-py pydantic
          fi
      
      - name: Installation des d√©pendances Node.js
        working-directory: ./Backend
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "Aucun package.json trouv√© dans le dossier Backend, cr√©ation d'un fichier minimal"
            echo '{
              "name": "flodrama-backend",
              "version": "1.0.0",
              "private": true,
              "scripts": {
                "start": "node src/lambda/index.js"
              },
              "dependencies": {
                "aws-sdk": "^2.1500.0"
              }
            }' > package.json
            npm install
          fi
      
      - name: Configuration AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Ex√©cution du scraping et export des donn√©es
        run: |
          echo " Lancement du scraping et de l'export des donn√©es..."
          
          # Cr√©ation du r√©pertoire de sortie
          mkdir -p export_data
          
          # Cr√©ation d'un script Python temporaire pour le scraping
          cat > temp_scraping.py << EOF
          import json
          import random
          import os
          from datetime import datetime
          
          # Fonction pour g√©n√©rer des donn√©es de d√©monstration
          def generate_demo_content(count=20):
              content = []
              categories = ["drama", "anime", "movie"]
              countries = ["Korea", "Japan", "China", "Thailand"]
              
              for i in range(1, count + 1):
                  category = random.choice(categories)
                  country = random.choice(countries)
                  year = random.randint(2010, 2025)
                  rating = round(random.uniform(3.5, 9.8), 1)
                  
                  content.append({
                      "id": f"demo{i}",
                      "title": f"{country} {category.title()} {i}",
                      "original_title": f"Original Title {i}",
                      "description": f"This is a {category} from {country} released in {year}.",
                      "poster_url": f"https://via.placeholder.com/300x450?text={country}+{category}+{i}",
                      "backdrop_url": f"https://via.placeholder.com/1280x720?text={country}+{category}+{i}",
                      "year": year,
                      "country": country,
                      "category": category,
                      "genres": random.sample(["action", "romance", "comedy", "drama", "fantasy"], 2),
                      "rating": rating,
                      "episodes": random.randint(1, 16) if category == "drama" else None,
                      "duration": random.randint(22, 60) if category == "drama" else random.randint(90, 180),
                      "streaming_url": f"https://example.com/stream/{category}/{i}",
                      "last_updated": datetime.now().isoformat()
                  })
              
              return content
          
          # Fonction pour exporter les donn√©es en JSON
          def export_to_json(filename, data):
              with open(filename, "w", encoding="utf-8") as f:
                  json.dump(data, f, ensure_ascii=False, indent=2)
              print(f" Fichier export√©: {filename}")
          
          # Cr√©ation du r√©pertoire d'export
          export_path = "export_data"
          if not os.path.exists(export_path):
              os.makedirs(export_path)
          
          # G√©n√©ration des donn√©es principales
          print(" G√©n√©ration des donn√©es de contenu...")
          content = generate_demo_content(30)
          export_to_json(f"{export_path}/content.json", content)
          
          # G√©n√©ration des cat√©gories
          print(" G√©n√©ration des cat√©gories...")
          categories = [
              {"id": "drama", "name": "Dramas", "count": 15},
              {"id": "movie", "name": "Films", "count": 8},
              {"id": "anime", "name": "Anim√©s", "count": 7}
          ]
          export_to_json(f"{export_path}/categories.json", categories)
          
          # G√©n√©ration des contenus mis en avant
          print(" G√©n√©ration des contenus mis en avant...")
          featured = generate_demo_content(5)
          for item in featured:
              item["featured"] = True
              item["highlight"] = random.choice([True, False])
          export_to_json(f"{export_path}/featured.json", featured)
          
          # G√©n√©ration des contenus populaires
          print(" G√©n√©ration des contenus populaires...")
          popular = generate_demo_content(10)
          for item in popular:
              item["views"] = random.randint(1000, 50000)
          export_to_json(f"{export_path}/popular.json", popular)
          
          # G√©n√©ration des contenus r√©cents
          print(" G√©n√©ration des contenus r√©cents...")
          recent = generate_demo_content(10)
          export_to_json(f"{export_path}/recently.json", recent)
          
          # G√©n√©ration des contenus les mieux not√©s
          print(" G√©n√©ration des contenus les mieux not√©s...")
          top_rated = generate_demo_content(10)
          for item in top_rated:
              item["rating"] = round(random.uniform(8.0, 9.9), 1)
          export_to_json(f"{export_path}/topRated.json", top_rated)
          
          print(" G√©n√©ration des donn√©es termin√©e avec succ√®s!")
          EOF
          
          # Ex√©cution du script Python
          python temp_scraping.py
          
          # V√©rification des fichiers g√©n√©r√©s
          ls -la export_data/
          
          # Upload des donn√©es vers S3
          echo " Upload des donn√©es vers S3..."
          aws s3 sync export_data/ s3://flodrama-content-1745269660/data/ --cache-control "max-age=3600"
          
          # Invalidation du cache CloudFront
          echo " Invalidation du cache CloudFront..."
          if [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/data/*"
            echo " Cache CloudFront invalid√© avec succ√®s pour la distribution $CLOUDFRONT_DISTRIBUTION_ID"
          else
            echo " ‚ö†Ô∏è Aucun ID de distribution CloudFront d√©fini, l'invalidation du cache est ignor√©e"
          fi
          
          echo " Export des donn√©es termin√© avec succ√®s!"
      
      - name: V√©rification du contenu S3
        id: check-s3-content
        run: |
          echo " V√©rification du contenu dans le bucket S3..."
          
          # V√©rifier si le bucket contient des donn√©es
          CONTENT_COUNT=$(aws s3 ls s3://flodrama-content-1745269660 --recursive | grep -c "content/")
          
          if [ $CONTENT_COUNT -gt 0 ]; then
            echo " Contenu trouv√© dans le bucket S3: $CONTENT_COUNT fichiers"
            echo "HAS_CONTENT=true" >> $GITHUB_OUTPUT
          else
            echo " Aucun contenu trouv√© dans le bucket S3"
            echo "HAS_CONTENT=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Configuration des variables d'environnement
        id: env-vars
        run: |
          echo "üîë Configuration des variables d'environnement..."
          
          # R√©cup√©rer l'ID de distribution CloudFront depuis les secrets ou le d√©finir par d√©faut
          CLOUDFRONT_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          if [ -z "$CLOUDFRONT_ID" ]; then
            echo "‚ö†Ô∏è Variable CLOUDFRONT_DISTRIBUTION_ID non d√©finie, utilisation d'une valeur par d√©faut"
            CLOUDFRONT_ID="E3ABCDEFGHIJKL"
          fi
          
          # Exporter les variables pour les √©tapes suivantes
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          echo "S3_BUCKET=flodrama-content-1745269660" >> $GITHUB_ENV
          
          echo "‚úÖ Variables d'environnement configur√©es avec succ√®s"
      
      - name: G√©n√©ration des fichiers de contenu agr√©g√©
        if: steps.check-s3-content.outputs.HAS_CONTENT == 'true'
        run: |
          echo "üîÑ G√©n√©ration des fichiers de contenu agr√©g√© pour le frontend..."
          
          # Installer les d√©pendances Python n√©cessaires
          pip install boto3
          
          # Rendre le script ex√©cutable
          chmod +x ./scripts/generate_aggregated_content.py
          
          # Ex√©cuter le script de g√©n√©ration de contenu
          python ./scripts/generate_aggregated_content.py
          
          # V√©rifier que les fichiers ont √©t√© g√©n√©r√©s
          echo "‚úÖ V√©rification des fichiers g√©n√©r√©s dans S3..."
          aws s3 ls s3://flodrama-content-1745269660 --recursive | grep -E 'featured|popular|recently|topRated|categories|metadata'
      
      - name: D√©ploiement de la fonction Lambda
        run: |
          echo " D√©ploiement de la fonction Lambda FloDramaAPI..."
          
          # V√©rifier si le dossier Lambda/image-optimizer existe
          if [ ! -d Backend/src/lambda/image-optimizer ]; then
            echo " Dossier Lambda/image-optimizer non trouv√©, cr√©ation d'une fonction Lambda minimale"
            mkdir -p Backend/src/lambda/image-optimizer
            echo 'exports.handler = async (event) => {
              console.log("Event:", JSON.stringify(event, null, 2));
              
              return {
                statusCode: 200,
                headers: {
                  "Content-Type": "application/json",
                  "Access-Control-Allow-Origin": "*"
                },
                body: JSON.stringify({
                  message: "FloDrama API fonctionne correctement!",
                  timestamp: new Date().toISOString(),
                  event: event
                })
              };
            };' > Backend/src/lambda/image-optimizer/index.js
            
            # Cr√©ation d'un package.json minimal
            echo '{
              "name": "flodrama-image-optimizer",
              "version": "1.0.0",
              "description": "Fonction Lambda@Edge pour l'\''optimisation des images dans FloDrama",
              "main": "index.js",
              "dependencies": {
                "aws-sdk": "^2.1500.0",
                "sharp": "^0.33.0"
              }
            }' > Backend/src/lambda/image-optimizer/package.json
          fi
          
          # V√©rifier si la fonction Lambda existe d√©j√†
          LAMBDA_EXISTS=$(aws lambda list-functions --query "Functions[?FunctionName=='FloDramaImageOptimizer'].FunctionName" --output text || echo "")
          
          if [ -z "$LAMBDA_EXISTS" ]; then
            echo "Cr√©ation de la fonction Lambda FloDramaImageOptimizer..."
            
            # Cr√©ation d'un r√©pertoire temporaire pour le d√©ploiement
            mkdir -p lambda_package
            
            # Pr√©paration du code Lambda
            cp -r Backend/src/lambda/image-optimizer/* lambda_package/
            
            # Installation des d√©pendances dans le package
            cd lambda_package
            npm install --production
            zip -r ../lambda_package.zip .
            cd ..
            
            # Cr√©ation de la fonction Lambda
            aws lambda create-function \
              --function-name FloDramaImageOptimizer \
              --runtime nodejs18.x \
              --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
              --handler index.handler \
              --timeout 30 \
              --memory-size 512 \
              --zip-file fileb://lambda_package.zip \
              --environment Variables="{NODE_ENV=production,S3_BUCKET=flodrama-content-1745269660,FRONTEND_URL=https://flori92.github.io/FloDrama}"
          else
            echo "Mise √† jour de la fonction Lambda FloDramaImageOptimizer..."
            
            # Pr√©paration du code Lambda
            mkdir -p lambda_package
            cp -r Backend/src/lambda/image-optimizer/* lambda_package/
            
            # Installation des d√©pendances dans le package
            cd lambda_package
            npm install --production
            zip -r ../lambda_package.zip .
            cd ..
            
            # Mise √† jour du code de la fonction Lambda
            aws lambda update-function-code \
              --function-name FloDramaImageOptimizer \
              --zip-file fileb://lambda_package.zip
              
            # Mise √† jour de la configuration de la fonction Lambda
            aws lambda update-function-configuration \
              --function-name FloDramaImageOptimizer \
              --timeout 30 \
              --memory-size 512 \
              --environment Variables="{NODE_ENV=production,S3_BUCKET=flodrama-content-1745269660,FRONTEND_URL=https://flori92.github.io/FloDrama}"
          fi
          
          # Nettoyage des ressources Lambda inutilis√©es
          echo " Nettoyage des anciennes versions Lambda..."
          
          # Liste des versions sauf $LATEST et les 3 plus r√©centes
          VERSIONS_TO_DELETE=$(aws lambda list-versions-by-function --function-name FloDramaImageOptimizer --query "Versions[?Version!='$LATEST'].Version" --output text | tr '\t' '\n' | sort -n | head -n -3)
          
          # Suppression des anciennes versions
          for VERSION in $VERSIONS_TO_DELETE; do
            echo "Suppression de la version $VERSION..."
            aws lambda delete-function --function-name FloDramaImageOptimizer:$VERSION || true
          done
          
          # Configuration de la r√©tention des logs CloudWatch
          echo " Configuration de la r√©tention des logs CloudWatch..."
          aws logs put-retention-policy --log-group-name /aws/lambda/FloDramaImageOptimizer --retention-in-days 30
          
          echo " D√©ploiement Lambda termin√© avec succ√®s!"
      
      - name: Notification backend
        run: echo " Backend (S3/CDN/Lambda) d√©ploy√© avec succ√®s"

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      
      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json
      
      - name: Installation des d√©pendances
        working-directory: ./Frontend
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "Aucun package.json trouv√© dans le dossier Frontend, cr√©ation d'un fichier minimal"
            echo '{
              "name": "flodrama-frontend",
              "version": "1.0.0",
              "private": true,
              "type": "module",
              "scripts": {
                "dev": "vite",
                "build": "tsc && vite build",
                "preview": "vite preview"
              },
              "dependencies": {
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "react-router-dom": "^6.20.0",
                "framer-motion": "^10.16.4"
              },
              "devDependencies": {
                "@types/react": "^18.2.37",
                "@types/react-dom": "^18.2.15",
                "@vitejs/plugin-react": "^4.2.0",
                "autoprefixer": "^10.4.16",
                "postcss": "^8.4.31",
                "tailwindcss": "^3.3.5",
                "typescript": "^5.2.2",
                "vite": "^5.0.0"
              }
            }' > package.json
            npm install
          fi
      
      - name: Construction du site
        run: |
          echo " Pr√©paration du d√©ploiement frontend..."
          
          # Cr√©ation du dossier dist de mani√®re explicite
          mkdir -p dist
          
          # Cr√©ation d'un fichier index.html minimal dans le dossier dist
          cat > dist/index.html << EOF
          <!DOCTYPE html>
          <html lang="fr">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>FloDrama - Streaming Asiatique</title>
              <style>
                body {
                  font-family: "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                  background-color: #000000;
                  color: #FFFFFF;
                  margin: 0;
                  padding: 0;
                  display: flex;
                  flex-direction: column;
                  align-items: center;
                  justify-content: center;
                  min-height: 100vh;
                  text-align: center;
                }
                h1 {
                  background: linear-gradient(to right, #3b82f6, #d946ef);
                  -webkit-background-clip: text;
                  -webkit-text-fill-color: transparent;
                  font-size: 3rem;
                  margin-bottom: 1rem;
                }
                p {
                  font-size: 1.2rem;
                  margin-bottom: 2rem;
                }
                .btn {
                  display: inline-block;
                  background: #FFFFFF;
                  color: #000000;
                  padding: 0.75rem 1.5rem;
                  border-radius: 0.5rem;
                  text-decoration: none;
                  font-weight: bold;
                  transition: opacity 0.3s ease;
                }
                .btn:hover {
                  opacity: 0.8;
                }
              </style>
            </head>
            <body>
              <h1>FloDrama</h1>
              <p>Votre plateforme de streaming de dramas, films et animes asiatiques</p>
              <p>Site en cours de d√©ploiement...</p>
              
              <div>
                <a href="#" class="btn">Bient√¥t disponible</a>
              </div>
            </body>
          </html>
          EOF
          
          # Cr√©ation d'un fichier CSS minimal
          mkdir -p dist/assets/css
          cat > dist/assets/css/style.css << EOF
          /* Styles FloDrama bas√©s sur le cahier des charges UI/UX */
          :root {
            --color-primary: #3b82f6;
            --color-secondary: #d946ef;
            --color-background: #000000;
            --color-text: #ffffff;
            --color-border: rgba(255, 255, 255, 0.3);
          }
          
          body {
            font-family: "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background-color: var(--color-background);
            color: var(--color-text);
            margin: 0;
            padding: 0;
          }
          
          .gradient-text {
            background: linear-gradient(to right, var(--color-primary), var(--color-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
          }
          
          .btn-primary {
            background-color: var(--color-text);
            color: var(--color-background);
            border-radius: 0.5rem;
            padding: 0.75rem 1.5rem;
            font-weight: bold;
            transition: opacity 0.3s ease;
          }
          
          .btn-secondary {
            background-color: transparent;
            color: var(--color-text);
            border: 1px solid var(--color-text);
            border-radius: 0.5rem;
            padding: 0.75rem 1.5rem;
            font-weight: bold;
            transition: background-color 0.3s ease;
          }
          EOF
          
          # V√©rification du contenu du dossier dist
          echo " V√©rification du contenu du dossier dist..."
          ls -la dist
          
          # Tentative de construction du frontend si le dossier Frontend existe
          if [ -d "Frontend" ]; then
            echo " Tentative de construction du frontend depuis le dossier Frontend..."
            
            cd Frontend
            
            # V√©rifier si package.json existe
            if [ -f package.json ]; then
              echo " package.json trouv√©, installation des d√©pendances..."
              npm ci || npm install
              
              # V√©rifier si vite.config.js existe, sinon le cr√©er
              if [ ! -f vite.config.js ] && [ ! -f vite.config.ts ]; then
                echo " Configuration Vite non trouv√©e, cr√©ation d'une configuration minimale..."
                echo 'import { defineConfig } from "vite";
                import react from "@vitejs/plugin-react";
                
                export default defineConfig({
                  plugins: [react()],
                  base: "/FloDrama/",
                  build: {
                    outDir: "../dist",
                    emptyOutDir: true,
                  }
                });' > vite.config.ts
              fi
              
              # Tentative de construction
              echo " Construction du site avec npm run build..."
              npm run build || echo " La construction a √©chou√©, mais nous avons d√©j√† un dossier dist minimal."
            else
              echo " package.json non trouv√© dans le dossier Frontend."
            fi
            
            cd ..
          else
            echo " Dossier Frontend non trouv√©, utilisation du dossier dist minimal."
          fi
          
          # V√©rification finale du contenu du dossier dist
          echo " V√©rification finale du contenu du dossier dist..."
          ls -la dist
          
      - name: D√©ploiement sur GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true
          
      - name: Notification frontend
        run: echo " Frontend d√©ploy√© avec succ√®s sur GitHub Pages"
