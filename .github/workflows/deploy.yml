name: Déploiement FloDrama sur GitHub Pages

on:
  push:
    branches:
      - main
      - master
      - gh-pages
  workflow_dispatch:

# Définition des permissions nécessaires
permissions:
  contents: write
  pages: write
  id-token: write

# Variables d'environnement globales
env:
  AWS_REGION: 'us-east-1'
  S3_BUCKET: 'flodrama-content-1745269660'
  API_URL: 'https://api.flodrama.com'
  FRONTEND_URL: 'https://flodrama.com'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Configuration de Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'Backend/api/package-lock.json'

      - name: Vérification de la configuration des identifiants AWS
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ Erreur : Les identifiants AWS ne sont pas configurés dans les secrets GitHub."
            echo "Veuillez configurer les secrets suivants :"
            echo "- AWS_ACCESS_KEY_ID"
            echo "- AWS_SECRET_ACCESS_KEY"
            echo "- AWS_ACCOUNT_ID"
            echo "- AWS_LAMBDA_ROLE_ARN"
            exit 1
          else
            echo "✅ Les secrets AWS sont configurés."
            echo "AWS_REGION: ${{ env.AWS_REGION }}"
            echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID != '' && '***' || 'Non configuré' }}"
            echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' && '***' || 'Non configuré' }}"
            echo "AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID != '' && '***' || 'Non configuré' }}"
            echo "AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN != '' && '***' || 'Non configuré' }}"
          fi

      - name: Configuration d'AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Installation des dépendances du backend
        working-directory: ./Backend/api
        run: |
          npm ci

      - name: Création du fichier .env de production
        working-directory: ./Backend/api
        run: |
          cat > .env << EOL
          NODE_ENV=production
          PORT=3001
          AWS_REGION=${{ env.AWS_REGION }}
          S3_BUCKET=${{ env.S3_BUCKET }}
          FRONTEND_URL=${{ env.FRONTEND_URL }}
          EOL

      - name: Création du package Lambda
        working-directory: ./Backend/api
        run: |
          zip -r ../backend-api.zip . -x "node_modules/aws-sdk/*" -x "*.git*" -x "*.env.example"

      - name: Déploiement sur AWS Lambda
        run: |
          # Vérifier si la fonction Lambda existe déjà
          LAMBDA_EXISTS=$(aws lambda list-functions --query "Functions[?FunctionName=='FloDramaAPI'].FunctionName" --output text || echo "")
          
          if [ -z "$LAMBDA_EXISTS" ]; then
            # Créer la fonction Lambda
            echo "Création de la fonction Lambda FloDramaAPI..."
            aws lambda create-function \
              --function-name FloDramaAPI \
              --runtime nodejs18.x \
              --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
              --handler contentDistributionAPI.handler \
              --zip-file fileb://Backend/backend-api.zip \
              --timeout 30 \
              --memory-size 512 \
              --environment "Variables={NODE_ENV=production,S3_BUCKET=${{ env.S3_BUCKET }},FRONTEND_URL=${{ env.FRONTEND_URL }}}"
          else
            # Mettre à jour la fonction Lambda existante
            echo "Mise à jour de la fonction Lambda FloDramaAPI..."
            aws lambda update-function-code \
              --function-name FloDramaAPI \
              --zip-file fileb://Backend/backend-api.zip
            
            # Mettre à jour la configuration de la fonction Lambda
            echo "Mise à jour de la configuration Lambda..."
            aws lambda update-function-configuration \
              --function-name FloDramaAPI \
              --timeout 30 \
              --memory-size 512 \
              --environment "Variables={NODE_ENV=production,S3_BUCKET=${{ env.S3_BUCKET }},FRONTEND_URL=${{ env.FRONTEND_URL }}}"
          fi
          
          # Configurer l'API Gateway si nécessaire
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='FloDramaAPI'].id" --output text || echo "")
          
          if [ -z "$API_ID" ]; then
            echo "Configuration d'API Gateway..."
            # Créer une nouvelle API
            API_ID=$(aws apigateway create-rest-api \
              --name FloDramaAPI \
              --endpoint-configuration "types=REGIONAL" \
              --query "id" --output text)
            
            # Configurer l'API
            ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
            
            # Créer la ressource /api
            API_RESOURCE_ID=$(aws apigateway create-resource \
              --rest-api-id $API_ID \
              --parent-id $ROOT_ID \
              --path-part "api" \
              --query "id" --output text)
            
            # Configurer la méthode ANY pour /api
            aws apigateway put-method \
              --rest-api-id $API_ID \
              --resource-id $API_RESOURCE_ID \
              --http-method ANY \
              --authorization-type NONE
            
            # Configurer l'intégration avec Lambda
            aws apigateway put-integration \
              --rest-api-id $API_ID \
              --resource-id $API_RESOURCE_ID \
              --http-method ANY \
              --type AWS_PROXY \
              --integration-http-method POST \
              --uri arn:aws:apigateway:${{ env.AWS_REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:FloDramaAPI/invocations
            
            # Déployer l'API
            aws apigateway create-deployment \
              --rest-api-id $API_ID \
              --stage-name prod
          else
            # Mettre à jour le déploiement
            echo "Mise à jour du déploiement API Gateway..."
            aws apigateway create-deployment \
              --rest-api-id $API_ID \
              --stage-name prod
          fi
          
          # Récupérer l'URL de l'API
          API_URL=$(aws apigateway get-stage \
            --rest-api-id $API_ID \
            --stage-name prod \
            --query "invokeUrl" --output text)
          
          echo "API Gateway URL: ${API_URL}/api"
          echo "API_GATEWAY_URL=${API_URL}/api" >> $GITHUB_ENV

      - name: Nettoyage des ressources AWS Lambda
        run: |
          echo "Nettoyage des anciennes versions Lambda..."
          
          # Récupération des versions de la fonction Lambda
          LAMBDA_VERSIONS=$(aws lambda list-versions-by-function --function-name FloDramaAPI --query "Versions[?Version!='$LATEST'].Version" --output text 2>/dev/null || echo "")
          
          if [ -n "$LAMBDA_VERSIONS" ]; then
            # Trier les versions et garder uniquement les plus anciennes à supprimer
            VERSIONS_TO_DELETE=$(echo "$LAMBDA_VERSIONS" | tr '\t' '\n' | sort -n | head -n -2)
            
            if [ -n "$VERSIONS_TO_DELETE" ]; then
              echo "Versions à supprimer: $VERSIONS_TO_DELETE"
              
              for VERSION in $VERSIONS_TO_DELETE; do
                echo "Suppression de la version $VERSION de FloDramaAPI..."
                aws lambda delete-function --function-name FloDramaAPI --qualifier $VERSION
              done
            else
              echo "Aucune ancienne version à supprimer."
            fi
          else
            echo "Aucune version supplémentaire trouvée pour la fonction FloDramaAPI."
          fi
          
          # Nettoyage des logs CloudWatch
          echo "Configuration de la politique de rétention des logs..."
          aws logs put-retention-policy --log-group-name "/aws/lambda/FloDramaAPI" --retention-in-days 30 || echo "Groupe de logs non trouvé"

      - name: Notification de déploiement du backend réussi
        run: |
          echo "✅ Backend FloDrama déployé avec succès!"
          echo "API URL: ${{ env.API_GATEWAY_URL }}"

  build-and-deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Configuration de Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'Frontend/package-lock.json'

      - name: Purge du cache npm (sécurité)
        working-directory: ./Frontend
        run: |
          npm cache clean --force

      - name: Installation des dépendances 
        working-directory: ./Frontend
        run: |
          npm ci
          
      - name: Correction de la configuration Tailwind 
        working-directory: ./Frontend
        run: |
          echo "Correction de la configuration Tailwind CSS..."
          # Simplifier postcss.config.js
          cat > postcss.config.js << 'EOL'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOL
          
          # Mettre à jour tailwind.config.js
          cat > tailwind.config.js << 'EOL'
          /** @type {import('tailwindcss').Config} */
          module.exports = {
            content: [
              './pages/**/*.{js,ts,jsx,tsx,mdx}',
              './components/**/*.{js,ts,jsx,tsx,mdx}',
              './app/**/*.{js,ts,jsx,tsx,mdx}',
              './src/**/*.{js,ts,jsx,tsx,mdx}',
            ],
            theme: {
              extend: {
                colors: {
                  'flo-blue': '#1E3A8A',
                  'flo-fuchsia': '#B91C1C',
                  'flo-violet': '#7E22CE',
                  'flo-gray': '#D1D5DB',
                },
              },
            },
            plugins: [],
          }
          EOL
          
          # Mettre à jour les versions de Tailwind dans package.json
          npm install --save-dev tailwindcss@3.3.0 autoprefixer@10.4.14 postcss@8.4.21
          
      - name: Configuration des données S3 et API
        working-directory: ./Frontend
        run: |
          echo "Configuration des données S3 et API..."
          mkdir -p src/config
          cat > src/config/data.ts << EOL
          // src/config/data.ts
          
          // Forcer l'utilisation du S3 pour toutes les URLs de données
          export const BASE_DATA_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/";
          export const SEARCH_INDEX_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/index.txt";
          export const API_URL = "${{ env.API_GATEWAY_URL || env.API_URL }}";
          
          // Log pour debug
          if (typeof window !== "undefined") {
            console.log("FloDrama - Configuration de données:", {
              baseUrl: BASE_DATA_URL,
              searchUrl: SEARCH_INDEX_URL,
              apiUrl: API_URL
            });
          }
          EOL
          
          # Créer le fichier .env.production
          cat > .env.production << EOL
          VITE_API_URL=${{ env.API_GATEWAY_URL || env.API_URL }}
          VITE_ENVIRONMENT=production
          EOL
          
      - name: Build du projet 
        working-directory: ./Frontend
        run: |
          echo "Création du build de production..."
          # Vérifier que le répertoire out n'existe pas déjà
          rm -rf out
          # Construction du projet
          npm run build
          # Créer un fichier .nojekyll pour GitHub Pages
          touch out/.nojekyll
          
      - name: Copier le fichier CNAME dans le dossier de build 
        run: |
          echo "Copie du fichier CNAME dans le dossier de build..."
          echo "flodrama.com" > Frontend/out/CNAME
          echo "Vérification du contenu du fichier CNAME..."
          cat Frontend/out/CNAME
        
      # Utilisation de l'action officielle GitHub Pages
      - name: Configuration de GitHub Pages 
        uses: actions/configure-pages@v4
      
      - name: Upload des artifacts 
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'Frontend/out'
      
      - name: Déploiement sur GitHub Pages 
        id: deployment
        uses: actions/deploy-pages@v4
          
      - name: Notification de déploiement réussi 
        run: |
          echo "✅ FloDrama a été déployé avec succès sur GitHub Pages!"
          echo "🌐 Frontend: https://flodrama.com"
          echo "🔌 Backend API: ${{ env.API_GATEWAY_URL || env.API_URL }}"
