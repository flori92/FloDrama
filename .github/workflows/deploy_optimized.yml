name: CI/CD FloDrama Optimis√©

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Permissions n√©cessaires pour GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Job de d√©ploiement du frontend (Vercel ou Surge)
  deploy_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json
      - name: Construction du frontend
        working-directory: ./Frontend
        run: |
          echo "üì¶ Installation des d√©pendances..."
          npm install --legacy-peer-deps
          echo "üîë Configuration des variables d'environnement..."
          if [ -f ".env.production" ]; then
            cp .env.production .env
          else
            echo "‚ö†Ô∏è Fichier .env.production non trouv√©, cr√©ation d'un fichier .env par d√©faut..."
            echo "REACT_APP_API_URL=https://flodrama-cors-proxy.onrender.com/api" > .env
          fi
          echo "üöÄ Construction de l'application React..."
          npm run build
          if [ $? -eq 0 ]; then
            echo "‚úÖ Construction du frontend r√©ussie!"
          else
            echo "‚ùå √âchec de la construction du frontend."
            # Cr√©ation d'une page d'attente simple
            mkdir -p dist
            echo "<html><head><title>FloDrama - Site en maintenance</title></head><body style='background:#121118;color:white;font-family:sans-serif;text-align:center;padding-top:50px;'><h1 style='color:#3b82f6;'>FloDrama</h1><p>Site en cours de d√©ploiement - Merci de votre patience</p></body></html>" > dist/index.html
            echo "‚ö†Ô∏è Page d'attente cr√©√©e"
          fi

      # Suppression de Surge, remplacement par d√©ploiement Vercel
      - name: D√©ploiement sur Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./Frontend
          vercel-args: '--prod'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Upload des fichiers frontend (pour le proxy)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: Frontend/dist
          retention-days: 1

  # Job de d√©ploiement du proxy
  deploy_proxy:
    runs-on: ubuntu-latest
    needs: [deploy_frontend]
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: T√©l√©chargement des fichiers frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist
          
      - name: Installation des d√©pendances du proxy
        run: |
          npm install express cors axios

      - name: Copie des fichiers du proxy vers le serveur
        run: |
          mkdir -p proxy-deploy
          cp Frontend/api-proxy-server.js proxy-deploy/server.js
          cp package.json proxy-deploy/
          mkdir -p proxy-deploy/dist
          cp -r frontend-dist/* proxy-deploy/dist/ || echo "Aucun fichier frontend √† copier"
