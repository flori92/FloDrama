#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de test pour l'insertion de donn√©es dans Supabase
Ce script cr√©e et ins√®re un drama de test dans la base de donn√©es
"""

import os
import time
import uuid
from datetime import datetime
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()

# Import des modules Supabase
try:
    from scraping.utils.supabase_database import supabase_db
    from scraping.utils.data_models import create_drama_model
except ImportError:
    # En cas d'import direct depuis le dossier racine
    import sys
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from scraping.utils.supabase_database import supabase_db
    from scraping.utils.data_models import create_drama_model

print("üîç Test d'insertion d'un drama dans Supabase")
print("-" * 50)

# Cr√©ation d'un drama de test
test_drama = create_drama_model(
    title=f"Drama de Test {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
    source="test_script",
    source_url="https://example.com/test-drama",
    original_title="ÌÖåÏä§Ìä∏ ÎìúÎùºÎßà",
    poster="https://via.placeholder.com/300x450.png?text=Test+Drama",
    backdrop="https://via.placeholder.com/1280x720.png?text=Test+Drama+Backdrop",
    year=2025,
    rating=8.5,
    language="Cor√©en",
    description="Un drama de test pour v√©rifier l'insertion dans Supabase",
    genres=["Test", "Com√©die", "Romance"],
    episodes_count=16,
    duration=60,
    country="Cor√©e du Sud",
    trailer_url="https://example.com/test-drama-trailer",
    watch_url="https://example.com/test-drama-watch",
    status="En cours",
    actors=["Acteur Test 1", "Actrice Test 2"],
    director="Directeur Test",
    studio="Studio Test",
    tags=["Test", "Drame", "Romance"],
    popularity=100,
    season=1,
    age_rating="16+",
    has_subtitles=True,
    is_featured=False,
    is_trending=True,
    synopsis="Un drama de test cr√©√© pour v√©rifier que l'insertion dans Supabase fonctionne correctement. Ce drama n'existe pas r√©ellement et est uniquement utilis√© √† des fins de test."
)

print(f"Drama de test cr√©√©: {test_drama['title']}")

# Enregistrement de la session de scraping
session_id = supabase_db.log_scraping_start('dramas', 'test_script')
print(f"Session de scraping cr√©√©e avec l'ID: {session_id}")

# Insertion du drama dans Supabase
start_time = time.time()
result = supabase_db.store_content('dramas', test_drama)
elapsed = time.time() - start_time

if result and result.get('id'):
    print(f"‚úÖ Drama ins√©r√© avec succ√®s en {elapsed:.2f}s")
    print(f"ID cr√©√©: {result.get('id')}")
    
    # V√©rification que le drama a bien √©t√© ins√©r√©
    check = supabase_db.client.table("dramas").select("*").eq("id", result.get('id')).execute()
    if check.data:
        print(f"‚úÖ V√©rification r√©ussie: le drama est bien pr√©sent dans la base")
    else:
        print(f"‚ùå V√©rification √©chou√©e: le drama n'est pas trouv√© dans la base")
else:
    print(f"‚ùå Erreur lors de l'insertion: {result}")

# Mise √† jour du log de scraping
update_result = supabase_db.update_scraping_log(session_id, {
    'items_count': 1,
    'errors_count': 0,
    'duration': elapsed
})

if update_result:
    print(f"‚úÖ Log de scraping mis √† jour avec succ√®s")
else:
    print(f"‚ùå Erreur lors de la mise √† jour du log de scraping")

print("\n‚úÖ Test termin√©")
