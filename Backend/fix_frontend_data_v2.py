#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de correction automatique pour le chargement des donn√©es frontend FloDrama
Ce script :
1. Modifie le fichier de configuration pour garantir l'utilisation du S3 en production
2. Cr√©e les fichiers JSON n√©cessaires dans le bon format
3. Les uploade sur S3 (sans utiliser ACL)
4. Force le push des modifications de configuration sans rebuild
"""

import os
import json
import boto3
import subprocess
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional

# Configuration
PROJECT_ROOT = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
FRONTEND_ROOT = PROJECT_ROOT / "Frontend"
CONFIG_FILE = FRONTEND_ROOT / "src" / "config" / "data.ts"
S3_BUCKET_NAME = "flodrama-exported-data"
AWS_REGION = "eu-west-3"
TEMP_DATA_DIR = PROJECT_ROOT / "temp_data"

# Structure des donn√©es √† g√©n√©rer
CONTENT_STRUCTURE = {
    "featured.json": [
        {
            "id": "1",
            "title": "Pachinko",
            "subtitle": "Nouvelle Saison",
            "description": "Une saga familiale √©pique qui s'√©tend sur quatre g√©n√©rations, depuis la Cor√©e sous occupation japonaise jusqu'au Japon moderne.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/pachinko-banner.jpg",
            "videoPreviewUrl": "https://d1pbqs2b6em4ha.cloudfront.net/videos/pachinko-preview.mp4",
            "year": 2023,
            "rating": 9.2,
            "duration": "50 min",
            "category": "Drame",
            "tags": ["Historique", "Famille", "Adaptation"]
        },
        {
            "id": "2",
            "title": "The Glory",
            "subtitle": "S√©rie Originale",
            "description": "Apr√®s avoir subi d'horribles brimades √† l'√©cole, une femme met au point un plan √©labor√© pour se venger de ses bourreaux.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/the-glory-banner.jpg",
            "videoPreviewUrl": "https://d1pbqs2b6em4ha.cloudfront.net/videos/the-glory-preview.mp4",
            "year": 2022,
            "rating": 8.8,
            "duration": "45 min",
            "category": "Thriller",
            "tags": ["Vengeance", "Drame", "Suspense"]
        },
        {
            "id": "3",
            "title": "Moving",
            "subtitle": "Exclusivit√©",
            "description": "Des adolescents aux super-pouvoirs et leurs parents, qui ont v√©cu en cachant leurs identit√©s, se retrouvent face √† de nouveaux d√©fis.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/moving-banner.jpg",
            "videoPreviewUrl": "https://d1pbqs2b6em4ha.cloudfront.net/videos/moving-preview.mp4",
            "year": 2023,
            "rating": 9.5,
            "duration": "60 min",
            "category": "Action",
            "tags": ["Super-h√©ros", "Fantastique", "Adaptation"]
        }
    ],
    "popular.json": [
        {
            "id": "4",
            "title": "Crash Landing on You",
            "description": "Une h√©riti√®re sud-cor√©enne atterrit accidentellement en Cor√©e du Nord apr√®s un accident de parapente.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/crash-landing.jpg",
            "year": 2020,
            "rating": 9.0,
            "duration": "70 min"
        },
        {
            "id": "5",
            "title": "Goblin",
            "description": "Un gobelin immortel cherche sa fianc√©e pour mettre fin √† sa vie √©ternelle.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/goblin.jpg",
            "year": 2016,
            "rating": 8.9,
            "duration": "60 min"
        },
        {
            "id": "6",
            "title": "Itaewon Class",
            "description": "Un ex-d√©tenu et ses amis luttent pour r√©ussir dans le quartier d'Itaewon.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/itaewon-class.jpg",
            "year": 2020,
            "rating": 8.7,
            "duration": "70 min"
        }
    ],
    "recently.json": [
        {
            "id": "9",
            "title": "Queen of Tears",
            "description": "L'histoire d'un couple mari√© qui traverse une crise dans leur relation.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/queen-of-tears.jpg",
            "year": 2024,
            "rating": 9.1,
            "duration": "70 min"
        },
        {
            "id": "10",
            "title": "Lovely Runner",
            "description": "Une fan voyage dans le temps pour sauver son idole d'un destin tragique.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/lovely-runner.jpg",
            "year": 2024,
            "rating": 8.9,
            "duration": "60 min"
        }
    ],
    "topRated.json": [
        {
            "id": "13",
            "title": "Reply 1988",
            "description": "La vie de cinq familles vivant dans le m√™me quartier de S√©oul en 1988.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/reply-1988.jpg",
            "year": 2015,
            "rating": 9.7,
            "duration": "90 min"
        },
        {
            "id": "14",
            "title": "My Mister",
            "description": "La relation entre un homme d'√¢ge moyen et une jeune femme qui ont tous deux travers√© des difficult√©s dans la vie.",
            "imageUrl": "https://d1pbqs2b6em4ha.cloudfront.net/images/my-mister.jpg",
            "year": 2018,
            "rating": 9.6,
            "duration": "90 min"
        }
    ]
}

# Contenu de l'index de recherche
SEARCH_INDEX = """Pachinko|Drama|2023|Une saga familiale √©pique qui s'√©tend sur quatre g√©n√©rations|1
The Glory|Thriller|2022|Apr√®s avoir subi d'horribles brimades √† l'√©cole|2
Moving|Action|2023|Des adolescents aux super-pouvoirs et leurs parents|3
Crash Landing on You|Romance|2020|Une h√©riti√®re sud-cor√©enne atterrit accidentellement en Cor√©e du Nord|4
Goblin|Fantaisie|2016|Un gobelin immortel cherche sa fianc√©e|5
"""

def print_step(message: str) -> None:
    """Affiche un message d'√©tape avec formatage."""
    print(f"\n{'='*80}\n{message}\n{'='*80}")

def update_config_file() -> None:
    """Met √† jour le fichier de configuration pour garantir l'utilisation du S3 en production."""
    print_step("Mise √† jour du fichier de configuration")
    
    # V√©rifier si le fichier existe
    if not CONFIG_FILE.exists():
        print(f"Erreur: Le fichier {CONFIG_FILE} n'existe pas")
        return
    
    # Lire le contenu actuel
    with open(CONFIG_FILE, 'r') as f:
        content = f.read()
    
    # Nouveau contenu avec une logique plus robuste et forc√©e
    new_content = """// src/config/data.ts

// Forcer l'utilisation du S3 pour toutes les URLs de donn√©es
// Cela garantit que m√™me en local, les donn√©es seront charg√©es depuis S3
export const BASE_DATA_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/";
export const SEARCH_INDEX_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/index.txt";

// Log pour debug
if (typeof window !== "undefined") {
  console.log("FloDrama - Configuration de donn√©es:", {
    baseUrl: BASE_DATA_URL,
    searchUrl: SEARCH_INDEX_URL
  });
}
"""
    
    # √âcrire le nouveau contenu
    with open(CONFIG_FILE, 'w') as f:
        f.write(new_content)
    
    print(f"‚úÖ Fichier {CONFIG_FILE} mis √† jour avec succ√®s")

def create_json_files() -> None:
    """Cr√©e les fichiers JSON n√©cessaires dans un r√©pertoire temporaire."""
    print_step("Cr√©ation des fichiers JSON")
    
    # Cr√©er le r√©pertoire temporaire s'il n'existe pas
    if TEMP_DATA_DIR.exists():
        shutil.rmtree(TEMP_DATA_DIR)
    TEMP_DATA_DIR.mkdir(parents=True)
    
    # Cr√©er chaque fichier JSON
    for filename, data in CONTENT_STRUCTURE.items():
        file_path = TEMP_DATA_DIR / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Fichier {filename} cr√©√©")
    
    # Cr√©er le fichier d'index de recherche
    index_path = TEMP_DATA_DIR / "index.txt"
    with open(index_path, 'w', encoding='utf-8') as f:
        f.write(SEARCH_INDEX)
    print(f"‚úÖ Fichier index.txt cr√©√©")

def upload_to_s3() -> bool:
    """Uploade les fichiers vers S3."""
    print_step("Upload des fichiers vers S3")
    
    try:
        # Initialiser le client S3
        s3 = boto3.client('s3', region_name=AWS_REGION)
        
        # Uploader chaque fichier
        for file_path in TEMP_DATA_DIR.glob('*'):
            file_name = file_path.name
            content_type = 'application/json' if file_name.endswith('.json') else 'text/plain'
            
            print(f"Upload de {file_name} vers s3://{S3_BUCKET_NAME}/{file_name}...")
            
            with open(file_path, 'rb') as f:
                s3.upload_fileobj(
                    f, 
                    S3_BUCKET_NAME, 
                    file_name,
                    ExtraArgs={
                        'ContentType': content_type,
                        # Pas d'ACL pour √©viter l'erreur AccessControlListNotSupported
                    }
                )
            
            print(f"‚úÖ {file_name} upload√© avec succ√®s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'upload vers S3: {str(e)}")
        return False

def deploy_frontend() -> bool:
    """D√©ploie uniquement les modifications de configuration sans rebuild complet."""
    print_step("D√©ploiement des modifications de configuration")
    
    try:
        # Se d√©placer dans le r√©pertoire frontend
        os.chdir(FRONTEND_ROOT)
        
        # Commiter les changements
        subprocess.run(["git", "add", "src/config/data.ts"], check=True)
        subprocess.run(["git", "commit", "-m", "üîß FIX: Forcer l'utilisation du S3 pour toutes les donn√©es"], check=True)
        
        # Push sans rebuild
        subprocess.run(["git", "push"], check=True)
        
        print("‚úÖ Configuration d√©ploy√©e avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du d√©ploiement: {str(e)}")
        return False
    finally:
        # Revenir au r√©pertoire d'origine
        os.chdir(PROJECT_ROOT)

def main() -> None:
    """Fonction principale qui orchestre toutes les √©tapes."""
    print_step("D√âBUT DE LA CORRECTION AUTOMATIQUE")
    
    # 1. Mettre √† jour le fichier de configuration
    update_config_file()
    
    # 2. Cr√©er les fichiers JSON
    create_json_files()
    
    # 3. Uploader vers S3
    s3_success = upload_to_s3()
    if not s3_success:
        print("‚ö†Ô∏è L'upload vers S3 a √©chou√©, mais on continue avec le d√©ploiement")
    
    # 4. D√©ployer uniquement les modifications de configuration
    deploy_success = deploy_frontend()
    
    # R√©sum√©
    print_step("R√âSUM√â")
    print(f"Configuration mise √† jour: ‚úÖ")
    print(f"Fichiers JSON cr√©√©s: ‚úÖ")
    print(f"Upload vers S3: {'‚úÖ' if s3_success else '‚ùå'}")
    print(f"D√©ploiement: {'‚úÖ' if deploy_success else '‚ùå'}")
    
    # Nettoyage
    if TEMP_DATA_DIR.exists():
        shutil.rmtree(TEMP_DATA_DIR)
        print("‚úÖ Nettoyage des fichiers temporaires effectu√©")
    
    print_step("FIN DE LA CORRECTION AUTOMATIQUE")
    
    # Instructions suppl√©mentaires
    if not s3_success or not deploy_success:
        print("\n‚ö†Ô∏è ATTENTION: Certaines √©tapes ont √©chou√©. Voici comment les r√©soudre manuellement:")
        
        if not s3_success:
            print("""
Pour uploader manuellement les fichiers vers S3:
1. Allez sur la console AWS: https://s3.console.aws.amazon.com/
2. S√©lectionnez le bucket "flodrama-exported-data"
3. Uploadez les fichiers depuis le r√©pertoire temp_data
4. Assurez-vous que les fichiers sont accessibles publiquement
            """)
        
        if not deploy_success:
            print("""
Pour d√©ployer manuellement les modifications:
1. Naviguez vers le r√©pertoire Frontend: cd /Users/floriace/FLO_DRAMA/FloDrama/Frontend
2. Committez les changements: git add src/config/data.ts && git commit -m "üîß FIX: Forcer l'utilisation du S3 pour toutes les donn√©es"
3. D√©ployez: git push
            """)

if __name__ == "__main__":
    main()
