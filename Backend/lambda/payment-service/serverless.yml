service: flodrama-payment-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-3
  stage: ${opt:stage, 'dev'}
  environment:
    SUBSCRIPTION_TABLE: ${self:service}-${self:provider.stage}-subscriptions
    PAYMENT_HISTORY_TABLE: ${self:service}-${self:provider.stage}-payment-history
    ANALYTICS_TABLE: ${self:service}-${self:provider.stage}-analytics
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt SubscriptionsTable.Arn
        - !GetAtt PaymentHistoryTable.Arn
        - !GetAtt AnalyticsTable.Arn
        - !Join ['', [!GetAtt PaymentHistoryTable.Arn, '/index/UserIdIndex']]
    - Effect: Allow
      Action:
        - cognito-idp:GetUser
      Resource: '*'

functions:
  getSubscription:
    handler: index.getSubscription
    events:
      - http:
          path: /subscription
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  updateSubscription:
    handler: index.updateSubscription
    events:
      - http:
          path: /subscription
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  createSubscription:
    handler: index.createSubscription
    events:
      - http:
          path: /subscription
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  cancelSubscription:
    handler: index.cancelSubscription
    events:
      - http:
          path: /subscription/{id}/cancel
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  verifyPayPalPayment:
    handler: index.verifyPayPalPayment
    events:
      - http:
          path: /verify-paypal
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  getPaymentHistory:
    handler: index.getPaymentHistory
    events:
      - http:
          path: /payment-history
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  trackConversion:
    handler: index.trackConversion
    events:
      - http:
          path: /analytics/conversion
          method: post
          cors: true

  trackUserBehavior:
    handler: index.trackUserBehavior
    events:
      - http:
          path: /analytics/behavior
          method: post
          cors: true

  getConversionMetrics:
    handler: index.getConversionMetrics
    events:
      - http:
          path: /analytics/conversion-metrics
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  getUserBehaviorMetrics:
    handler: index.getUserBehaviorMetrics
    events:
      - http:
          path: /analytics/behavior-metrics
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

resources:
  Resources:
    # Table des abonnements
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SUBSCRIPTION_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    # Table de l'historique des paiements
    PaymentHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PAYMENT_HISTORY_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Table des analytics
    AnalyticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ANALYTICS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    # Authorizer pour API Gateway
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn

    # Cognito User Pool pour l'authentification
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    # Client Cognito pour l'application web
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
