#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de correction de la configuration Tailwind CSS pour FloDrama
Ce script :
1. Restaure la configuration Tailwind CSS d'origine
2. Met √† jour la configuration des donn√©es pour forcer l'utilisation de S3
3. Pr√©pare et ex√©cute un d√©ploiement sur GitHub Pages
"""

import os
import json
import subprocess
import shutil
from pathlib import Path

# Configuration
PROJECT_ROOT = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
FRONTEND_ROOT = PROJECT_ROOT / "Frontend"
CONFIG_FILE = FRONTEND_ROOT / "src" / "config" / "data.ts"
POSTCSS_CONFIG = FRONTEND_ROOT / "postcss.config.js"
TAILWIND_CONFIG = FRONTEND_ROOT / "tailwind.config.js"
PACKAGE_JSON = FRONTEND_ROOT / "package.json"
GITHUB_PAGES_BRANCH = "gh-pages"  # Branche utilis√©e pour GitHub Pages

def print_step(message: str) -> None:
    """Affiche un message d'√©tape avec formatage."""
    print(f"\n{'='*80}\n{message}\n{'='*80}")

def update_config_file() -> None:
    """Met √† jour le fichier de configuration pour garantir l'utilisation du S3 en production."""
    print_step("Mise √† jour du fichier de configuration des donn√©es")
    
    # V√©rifier si le fichier existe
    if not CONFIG_FILE.exists():
        print(f"Erreur: Le fichier {CONFIG_FILE} n'existe pas")
        return
    
    # Nouveau contenu avec une logique plus robuste et forc√©e
    new_content = """// src/config/data.ts

// Forcer l'utilisation du S3 pour toutes les URLs de donn√©es
// Cela garantit que m√™me en local, les donn√©es seront charg√©es depuis S3
export const BASE_DATA_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/";
export const SEARCH_INDEX_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/index.txt";

// Log pour debug
if (typeof window !== "undefined") {
  console.log("FloDrama - Configuration de donn√©es:", {
    baseUrl: BASE_DATA_URL,
    searchUrl: SEARCH_INDEX_URL
  });
}
"""
    
    # √âcrire le nouveau contenu
    with open(CONFIG_FILE, 'w') as f:
        f.write(new_content)
    
    print(f"‚úÖ Fichier {CONFIG_FILE} mis √† jour avec succ√®s")

def fix_tailwind_config() -> None:
    """Restaure la configuration Tailwind CSS d'origine."""
    print_step("Restauration de la configuration Tailwind CSS d'origine")
    
    # 1. Restaurer postcss.config.js
    postcss_content = """module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
"""
    with open(POSTCSS_CONFIG, 'w') as f:
        f.write(postcss_content)
    print(f"‚úÖ {POSTCSS_CONFIG} restaur√© √† sa configuration d'origine")
    
    # 2. V√©rifier et mettre √† jour package.json pour supprimer @tailwindcss/postcss s'il existe
    if PACKAGE_JSON.exists():
        with open(PACKAGE_JSON, 'r') as f:
            package_data = json.load(f)
        
        # Supprimer la d√©pendance si elle existe
        if '@tailwindcss/postcss' in package_data.get('dependencies', {}):
            del package_data['dependencies']['@tailwindcss/postcss']
            print(f"‚úÖ D√©pendance @tailwindcss/postcss supprim√©e des dependencies")
        
        if '@tailwindcss/postcss' in package_data.get('devDependencies', {}):
            del package_data['devDependencies']['@tailwindcss/postcss']
            print(f"‚úÖ D√©pendance @tailwindcss/postcss supprim√©e des devDependencies")
        
        with open(PACKAGE_JSON, 'w') as f:
            json.dump(package_data, f, indent=2)
        
        print(f"‚úÖ {PACKAGE_JSON} mis √† jour")
    else:
        print(f"‚ùå {PACKAGE_JSON} n'existe pas")
    
    print("‚úÖ Configuration Tailwind CSS restaur√©e")

def deploy_frontend() -> bool:
    """D√©ploie l'application frontend sur GitHub Pages."""
    print_step("D√©ploiement du frontend sur GitHub Pages")
    
    try:
        # Se d√©placer dans le r√©pertoire frontend
        os.chdir(FRONTEND_ROOT)
        
        # 1. Commiter les changements de configuration
        subprocess.run(["git", "add", "src/config/data.ts", "postcss.config.js", "package.json"], check=True)
        subprocess.run(["git", "commit", "-m", "üîß FIX: Restauration de la configuration Tailwind CSS et for√ßage des URLs S3"], check=True)
        
        # 2. Construire l'application
        print("Construction de l'application (npm run build)...")
        build_result = subprocess.run(["npm", "run", "build"], capture_output=True, text=True)
        
        # Capturer la sortie pour analyse
        build_output = build_result.stdout + build_result.stderr
        
        # 3. V√©rifier si la construction a r√©ussi
        if build_result.returncode != 0:
            print(f"‚ùå Erreur lors de la construction de l'application:")
            print(build_output)
            return False
        
        print("‚úÖ Construction r√©ussie")
        
        # 4. D√©ployer sur GitHub Pages
        print(f"D√©ploiement sur la branche {GITHUB_PAGES_BRANCH}...")
        subprocess.run(["git", "push"], check=True)
        
        print("‚úÖ Frontend d√©ploy√© avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du d√©ploiement: {str(e)}")
        return False
    finally:
        # Revenir au r√©pertoire d'origine
        os.chdir(PROJECT_ROOT)

def main() -> None:
    """Fonction principale qui orchestre toutes les √©tapes."""
    print_step("D√âBUT DE LA CORRECTION DE LA CONFIGURATION TAILWIND")
    
    # 1. Mettre √† jour le fichier de configuration des donn√©es
    update_config_file()
    
    # 2. Restaurer la configuration Tailwind CSS d'origine
    fix_tailwind_config()
    
    # 3. D√©ployer le frontend
    deploy_success = deploy_frontend()
    
    # R√©sum√©
    print_step("R√âSUM√â")
    print(f"Configuration des donn√©es mise √† jour: ‚úÖ")
    print(f"Configuration Tailwind CSS restaur√©e: ‚úÖ")
    print(f"D√©ploiement: {'‚úÖ' if deploy_success else '‚ùå'}")
    
    print_step("FIN DE LA CORRECTION")
    
    # Instructions suppl√©mentaires en cas d'√©chec
    if not deploy_success:
        print("""
Pour d√©ployer manuellement le frontend:
1. Naviguez vers le r√©pertoire Frontend: cd /Users/floriace/FLO_DRAMA/FloDrama/Frontend
2. V√©rifiez que postcss.config.js contient bien:
   module.exports = {
     plugins: {
       tailwindcss: {},
       autoprefixer: {},
     },
   }
3. Construisez l'application: npm run build
4. D√©ployez: git push
        """)

if __name__ == "__main__":
    main()
