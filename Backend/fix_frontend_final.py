#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de correction finale du frontend FloDrama
Ce script :
1. Identifie la version de Tailwind CSS install√©e
2. Configure correctement PostCSS selon cette version
3. Force l'utilisation des URLs S3 pour les donn√©es
4. Pousse les modifications sans tenter de rebuild
"""

import os
import json
import subprocess
import re
from pathlib import Path

# Configuration
PROJECT_ROOT = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
FRONTEND_ROOT = PROJECT_ROOT / "Frontend"
CONFIG_FILE = FRONTEND_ROOT / "src" / "config" / "data.ts"
POSTCSS_CONFIG = FRONTEND_ROOT / "postcss.config.js"
PACKAGE_JSON = FRONTEND_ROOT / "package.json"
GITHUB_PAGES_BRANCH = "gh-pages"  # Branche utilis√©e pour GitHub Pages

def print_step(message: str) -> None:
    """Affiche un message d'√©tape avec formatage."""
    print(f"\n{'='*80}\n{message}\n{'='*80}")

def update_config_file() -> None:
    """Met √† jour le fichier de configuration pour garantir l'utilisation du S3 en production."""
    print_step("Mise √† jour du fichier de configuration des donn√©es")
    
    # V√©rifier si le fichier existe
    if not CONFIG_FILE.exists():
        print(f"Erreur: Le fichier {CONFIG_FILE} n'existe pas")
        return
    
    # Nouveau contenu avec une logique plus robuste et forc√©e
    new_content = """// src/config/data.ts

// Forcer l'utilisation du S3 pour toutes les URLs de donn√©es
// Cela garantit que m√™me en local, les donn√©es seront charg√©es depuis S3
export const BASE_DATA_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/";
export const SEARCH_INDEX_URL = "https://flodrama-exported-data.s3.eu-west-3.amazonaws.com/index.txt";

// Log pour debug
if (typeof window !== "undefined") {
  console.log("FloDrama - Configuration de donn√©es:", {
    baseUrl: BASE_DATA_URL,
    searchUrl: SEARCH_INDEX_URL
  });
}
"""
    
    # √âcrire le nouveau contenu
    with open(CONFIG_FILE, 'w') as f:
        f.write(new_content)
    
    print(f"‚úÖ Fichier {CONFIG_FILE} mis √† jour avec succ√®s")

def get_tailwind_version() -> str:
    """D√©termine la version de Tailwind CSS install√©e."""
    print_step("D√©tection de la version de Tailwind CSS")
    
    try:
        os.chdir(FRONTEND_ROOT)
        result = subprocess.run(["npm", "list", "tailwindcss", "--depth=0"], 
                               capture_output=True, text=True)
        
        # Recherche du pattern de version avec regex
        version_match = re.search(r'tailwindcss@(\d+\.\d+\.\d+)', result.stdout)
        if version_match:
            version = version_match.group(1)
            print(f"‚úÖ Version de Tailwind CSS d√©tect√©e: {version}")
            return version
        else:
            print("‚ö†Ô∏è Impossible de d√©tecter la version de Tailwind CSS")
            return "3.0.0"  # Version par d√©faut
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©tection de la version: {str(e)}")
        return "3.0.0"  # Version par d√©faut
    finally:
        os.chdir(PROJECT_ROOT)

def fix_tailwind_config(version: str) -> None:
    """Configure correctement PostCSS selon la version de Tailwind."""
    print_step("Configuration de PostCSS pour Tailwind CSS")
    
    # D√©terminer la configuration correcte selon la version
    major_version = int(version.split('.')[0])
    
    if major_version >= 3:
        # Pour Tailwind CSS v3+
        postcss_content = """module.exports = {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
}
"""
    else:
        # Pour les versions ant√©rieures
        postcss_content = """module.exports = {
  plugins: [
    require('tailwindcss'),
    require('autoprefixer'),
  ],
}
"""
    
    # √âcrire la configuration
    with open(POSTCSS_CONFIG, 'w') as f:
        f.write(postcss_content)
    
    print(f"‚úÖ {POSTCSS_CONFIG} configur√© pour Tailwind CSS v{major_version}")

def push_changes() -> bool:
    """Pousse les modifications sans tenter de rebuild."""
    print_step("D√©ploiement des modifications de configuration")
    
    try:
        # Se d√©placer dans le r√©pertoire frontend
        os.chdir(FRONTEND_ROOT)
        
        # 1. Commiter les changements de configuration
        subprocess.run(["git", "add", "src/config/data.ts", "postcss.config.js"], check=True)
        subprocess.run(["git", "commit", "-m", "üîß FIX: Configuration correcte pour Tailwind CSS et for√ßage des URLs S3"], check=True)
        
        # 2. Pousser les changements
        print("D√©ploiement des modifications...")
        subprocess.run(["git", "push"], check=True)
        
        print("‚úÖ Modifications d√©ploy√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du d√©ploiement: {str(e)}")
        return False
    finally:
        # Revenir au r√©pertoire d'origine
        os.chdir(PROJECT_ROOT)

def main() -> None:
    """Fonction principale qui orchestre toutes les √©tapes."""
    print_step("D√âBUT DE LA CORRECTION FINALE DU FRONTEND")
    
    # 1. Mettre √† jour le fichier de configuration des donn√©es
    update_config_file()
    
    # 2. D√©tecter la version de Tailwind CSS
    tailwind_version = get_tailwind_version()
    
    # 3. Configurer PostCSS correctement
    fix_tailwind_config(tailwind_version)
    
    # 4. Pousser les modifications
    push_success = push_changes()
    
    # R√©sum√©
    print_step("R√âSUM√â")
    print(f"Configuration des donn√©es mise √† jour: ‚úÖ")
    print(f"Version de Tailwind CSS d√©tect√©e: {tailwind_version}")
    print(f"Configuration PostCSS mise √† jour: ‚úÖ")
    print(f"D√©ploiement des modifications: {'‚úÖ' if push_success else '‚ùå'}")
    
    print_step("FIN DE LA CORRECTION")
    
    # Instructions suppl√©mentaires
    print("""
PROCHAINES √âTAPES RECOMMAND√âES:

1. V√©rifiez l'√©tat du d√©ploiement sur GitHub Pages
   - Attendez quelques minutes que le d√©ploiement soit effectif
   - V√©rifiez que les donn√©es sont correctement charg√©es depuis S3

2. Si le probl√®me persiste:
   - V√©rifiez les logs de d√©ploiement sur GitHub
   - Assurez-vous que le domaine flodrama.com pointe vers le bon projet GitHub Pages
   - Consid√©rez un red√©ploiement complet avec un nouveau projet Next.js

3. Pour un red√©ploiement complet:
   - Sauvegardez vos composants et logique m√©tier actuels
   - Cr√©ez un nouveau projet Next.js avec la derni√®re version
   - R√©int√©grez vos composants et logique m√©tier
   - Configurez correctement les URLs de donn√©es d√®s le d√©but
    """)

if __name__ == "__main__":
    main()
