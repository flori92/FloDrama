<!DOCTYPE html><html lang="fr"><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#3b82f6">
  <meta name="description" content="FloDrama - Votre plateforme de streaming dédiée aux dramas et films asiatiques">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>FloDrama - Streaming de Dramas et Films Asiatiques</title>
  
  <!-- Chargement des styles CSS via des balises link -->
  <link rel="stylesheet" href="src/styles/globals.css">
  <link rel="stylesheet" href="src/styles/animations.css">
  
  <!-- Chargement direct de React depuis un CDN -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  
  <!-- Système optimisé d'images pour FloDrama -->
  <script>
    // Mapping des images pour garantir le chargement
    const POSTER_MAPPING = {
      'goblin': 'https://image.tmdb.org/t/p/w500/jMh7903oTJktQAZKdK6dl7EDFsK.jpg',
      'crash-landing-on-you': 'https://image.tmdb.org/t/p/w500/iFFXSsvl4dZkdUKpf88Kp2Rkm7S.jpg',
      'itaewon-class': 'https://image.tmdb.org/t/p/w500/yQUyayLdVhRKQh33P9rDAavjJDl.jpg',
      'squid-game': 'https://image.tmdb.org/t/p/w500/dDlEmu3EZ0Pgg93K2SVNLCjCSvE.jpg',
      'train-to-busan': 'https://image.tmdb.org/t/p/w500/2mFR7ncAUgICQRYL98yLK9qEYA3.jpg',
      'oldboy': 'https://image.tmdb.org/t/p/w500/jB7ol6ry8dlqMp6kKlKHLfPke4e.jpg',
      'the-handmaiden': 'https://image.tmdb.org/t/p/w500/wvzfK5QR6dGLwND8MCzWjsQWG4Q.jpg',
      'minari': 'https://image.tmdb.org/t/p/w500/9Bb6K6HINl3vEKCu8WXEZyHvvpq.jpg',
      'mother': 'https://image.tmdb.org/t/p/w500/fgce3DHrMZDQTJkALT5hVxvbGPf.jpg',
      'parasite': 'https://image.tmdb.org/t/p/w500/7IiTTgloJzvGI1TAYymCfbfl3vT.jpg',
      'burning': 'https://image.tmdb.org/t/p/w500/8n5ZKh97Wz2C1YpsZxVjARe85gF.jpg',
      'my-love-from-the-star': 'https://image.tmdb.org/t/p/w500/oVOnxvr6xLBdcfZcteA4diE0CQQ.jpg',
      'vincenzo': 'https://image.tmdb.org/t/p/w500/8ToIjpLKSRRR3TT22n2ZceSiNkq.jpg',
      'attack-on-titan': 'https://image.tmdb.org/t/p/w500/aiy35Evcofzl7hNzFdoEZ2xmEb3.jpg',
      'demon-slayer': 'https://image.tmdb.org/t/p/w500/wrCVHdkBlBWdJUZPvnJWcBRuhSY.jpg',
      'jujutsu-kaisen': 'https://image.tmdb.org/t/p/w500/g1rK2nRXSidcMwNliWDIroWWGTn.jpg',
      'your-name': 'https://image.tmdb.org/t/p/w500/q719jXXEzOoYaps6babgKnONONX.jpg',
      'solo-leveling': 'https://image.tmdb.org/t/p/w500/waBWGjsksNAopCgqKQGGGQXnKlp.jpg'
    };
    
    // Fonction pour obtenir l'URL optimisée d'une image
    function getOptimizedImageUrl(imagePath) {
      if (!imagePath) return '';
      
      // Extraire le nom de base sans extension
      const baseName = imagePath.split('/').pop().split('.')[0];
      
      // Vérifier si nous avons une correspondance dans notre mapping
      if (POSTER_MAPPING[baseName]) {
        return POSTER_MAPPING[baseName];
      }
      
      // Fallback sur Unsplash avec le nom comme requête
      return `https://source.unsplash.com/300x450/?movie,${baseName.replace(/-/g, ',')}`;
    }
    
    // Fonction optimisée de chargement d'image
    function loadImage(src, callback) {
      const preloadImg = new Image();
      const fallbackSrc = getOptimizedImageUrl(src);
      
      preloadImg.onload = function() {
        if (callback) callback(this.src);
      };
      
      preloadImg.onerror = function() {
        console.log("Utilisation de l'image de fallback pour:", src);
        this.src = fallbackSrc;
        if (callback) callback(fallbackSrc);
      };
      
      // Essayer d'abord la source originale, mais avec un timeout court
      setTimeout(() => {
        if (!preloadImg.complete) {
          console.log("Timeout pour l'image:", src);
          preloadImg.src = fallbackSrc;
        }
      }, 2000);
      
      preloadImg.src = src;
      return preloadImg;
    }
    
    // Données locales pour garantir le contenu
    const LOCAL_CONTENT = {
      featuredContent: [
        {
          id: "parasite",
          title: "Parasite",
          description: "Une famille pauvre s'immisce subtilement dans le quotidien d'une famille riche, jusqu'à ce qu'un incident imprévisible ne complique les choses.",
          image: "https://image.tmdb.org/t/p/w1280/7IiTTgloJzvGI1TAYymCfbfl3vT.jpg",
          rating: 4.8,
          year: 2019,
          genre: "Thriller, Drame",
          country: "Corée du Sud"
        },
        {
          id: "crash-landing-on-you",
          title: "Crash Landing on You",
          description: "Une héritière sud-coréenne atterrit accidentellement en Corée du Nord après un accident de parapente. Elle y rencontre un officier qui décide de l'aider.",
          image: "https://image.tmdb.org/t/p/w1280/iFFXSsvl4dZkdUKpf88Kp2Rkm7S.jpg",
          rating: 4.9,
          year: 2019,
          genre: "Romance, Drame",
          country: "Corée du Sud"
        }
      ],
      dramasList: [
        {
          id: "crash-landing-on-you",
          title: "Crash Landing on You",
          image: "https://image.tmdb.org/t/p/w500/iFFXSsvl4dZkdUKpf88Kp2Rkm7S.jpg",
          rating: 4.9,
          year: 2019
        },
        {
          id: "goblin",
          title: "Guardian: The Lonely and Great God",
          image: "https://image.tmdb.org/t/p/w500/jMh7903oTJktQAZKdK6dl7EDFsK.jpg",
          rating: 4.8,
          year: 2016
        },
        {
          id: "itaewon-class",
          title: "Itaewon Class",
          image: "https://image.tmdb.org/t/p/w500/yQUyayLdVhRKQh33P9rDAavjJDl.jpg",
          rating: 4.7,
          year: 2020
        }
      ],
      moviesList: [
        {
          id: "oldboy",
          title: "Oldboy",
          image: "https://image.tmdb.org/t/p/w500/jB7ol6ry8dlqMp6kKlKHLfPke4e.jpg",
          rating: 4.6,
          year: 2003
        },
        {
          id: "train-to-busan",
          title: "Train to Busan",
          image: "https://image.tmdb.org/t/p/w500/2mFR7ncAUgICQRYL98yLK9qEYA3.jpg",
          rating: 4.5,
          year: 2016
        },
        {
          id: "the-handmaiden",
          title: "The Handmaiden",
          image: "https://image.tmdb.org/t/p/w500/wvzfK5QR6dGLwND8MCzWjsQWG4Q.jpg",
          rating: 4.7,
          year: 2016
        }
      ]
    };
  </script>

  <!-- Styles spécifiques pour l'application -->
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
    
    #root {
      height: 100%;
    }
    
    .loading-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: linear-gradient(135deg, #121118 0%, #1A1926 100%);
      color: #f3b4f6;
    }
    
    .loading-logo {
      width: 180px;
      margin-bottom: 20px;
    }
    
    .loading-title {
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      margin-bottom: 16px;
      font-size: 2.5rem;
      font-weight: 700;
    }
    
    .loading-text {
      font-size: 1.2rem;
      margin-bottom: 24px;
      text-align: center;
      max-width: 500px;
      line-height: 1.5;
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(59, 130, 246, 0.2);
      border-top: 5px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .app-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      background-color: #121118;
      color: white;
    }
    
    .header {
      display: flex;
      align-items: center;
      padding: 1rem 2rem;
      background-color: rgba(0, 0, 0, 0.3);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    .logo {
      display: flex;
      align-items: center;
      font-size: 1.5rem;
      font-weight: bold;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      cursor: pointer;
    }
    
    .logo-icon {
      width: 40px;
      height: 40px;
      margin-right: 10px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
    }
    
    .nav {
      display: flex;
      margin-left: 2rem;
    }
    
    .nav-item {
      margin-right: 1.5rem;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.3s ease, transform 0.3s ease;
      position: relative;
    }
    
    .nav-item:hover {
      opacity: 1;
      transform: translateY(-2px);
    }
    
    .nav-item.active {
      opacity: 1;
      position: relative;
    }
    
    .nav-item.active::after {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 0;
      width: 100%;
      height: 2px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
    }
    
    .main-content {
      flex: 1;
      padding: 2rem;
    }
    
    .hero {
      position: relative;
      height: 500px;
      border-radius: 12px;
      overflow: hidden;
      margin-bottom: 2rem;
      background: linear-gradient(135deg, #1A1926 0%, #121118 100%);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }
    
    .hero-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.6;
      transition: transform 8s ease;
    }
    
    .hero:hover .hero-image {
      transform: scale(1.05);
    }
    
    .hero-content {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      padding: 2rem;
      background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
      z-index: 2;
    }
    
    .hero-title {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      transform: translateY(0);
      transition: transform 0.5s ease;
    }
    
    .hero:hover .hero-title {
      transform: translateY(-5px);
    }
    
    .hero-description {
      font-size: 1rem;
      max-width: 600px;
      margin-bottom: 1rem;
      opacity: 0.9;
      transform: translateY(0);
      transition: transform 0.5s ease 0.1s;
    }
    
    .hero:hover .hero-description {
      transform: translateY(-5px);
    }
    
    .hero-button {
      background: linear-gradient(to right, #3b82f6, #d946ef);
      border: none;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 24px;
      cursor: pointer;
      font-weight: bold;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      transform: translateY(0);
      transition: transform 0.5s ease 0.2s, box-shadow 0.3s ease;
    }
    
    .hero:hover .hero-button {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(217, 70, 239, 0.4);
    }
    
    .section-title {
      font-size: 1.5rem;
      margin-bottom: 1rem;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      display: inline-block;
    }
    
    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .card {
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      cursor: pointer;
      background-color: #1A1926;
      height: 100%;
    }
    
    .card:hover {
      transform: translateY(-5px) scale(1.02);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
      z-index: 10;
    }
    
    .card-image-container {
      position: relative;
      width: 100%;
      aspect-ratio: 2/3;
      overflow: hidden;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(217, 70, 239, 0.2));
    }
    
    .card-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }
    
    .card:hover .card-image {
      transform: scale(1.1);
    }
    
    .card-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 70%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .card:hover .card-overlay {
      opacity: 1;
    }
    
    .card-content {
      padding: 1rem;
      position: relative;
      z-index: 2;
    }
    
    .card-title {
      font-size: 1rem;
      margin-bottom: 0.5rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color 0.3s ease;
    }
    
    .card:hover .card-title {
      color: #d946ef;
    }
    
    .card-info {
      display: flex;
      font-size: 0.8rem;
      opacity: 0.7;
    }
    
    .card-year {
      margin-right: 1rem;
    }
    
    .card-badge {
      position: absolute;
      top: 10px;
      right: 10px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.7rem;
      font-weight: bold;
      opacity: 0;
      transform: translateY(-10px);
      transition: opacity 0.3s ease, transform 0.3s ease;
      z-index: 5;
    }
    
    .card:hover .card-badge {
      opacity: 1;
      transform: translateY(0);
    }
    
    .card-play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
      width: 50px;
      height: 50px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: opacity 0.3s ease, transform 0.3s ease;
      z-index: 5;
    }
    
    .card:hover .card-play-button {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
    
    .play-icon {
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 8px 0 8px 16px;
      border-color: transparent transparent transparent white;
      margin-left: 3px;
    }
    
    .footer {
      padding: 2rem;
      background-color: rgba(0, 0, 0, 0.3);
      text-align: center;
    }
    
    .footer-logo {
      font-size: 1.5rem;
      font-weight: bold;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      margin-bottom: 1rem;
      display: inline-block;
    }
    
    .footer-links {
      display: flex;
      justify-content: center;
      margin-bottom: 1rem;
    }
    
    .footer-link {
      margin: 0 1rem;
      opacity: 0.7;
      cursor: pointer;
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
    
    .footer-link:hover {
      opacity: 1;
      transform: translateY(-2px);
    }
    
    .footer-copyright {
      opacity: 0.5;
      font-size: 0.8rem;
    }
    
    /* Ajout d'animations et transitions */
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Styles pour le lazy loading des images */
    .lazy-image-container {
      position: relative;
      overflow: hidden;
      background-color: #1A1926;
      width: 100%;
      height: 100%;
    }
    
    .lazy-image-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to bottom, #d946ef, #8b5cf6, #3b82f6);
      opacity: 1;
      transition: opacity 0.3s ease;
      animation: pulse 1.5s ease-in-out infinite alternate;
    }
    
    @keyframes pulse {
      0% { opacity: 0.6; }
      100% { opacity: 0.8; }
    }
    
    .lazy-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .lazy-image.loaded {
      opacity: 1;
    }
    
    .lazy-image.loaded + .lazy-image-placeholder {
      opacity: 0;
    }
  </style>
  <link rel="preload" href="images/posters/crash-landing-on-you.jpg" as="image">
  <link rel="preload" href="images/posters/goblin.jpg" as="image">
  <link rel="preload" href="images/posters/itaewon-class.jpg" as="image">
</head>
<body>
  <div id="root">
    <!-- Écran de chargement initial -->
    <div style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #121118; flex-direction: column;">
      <h1 style="color: white; font-size: 2rem; margin-bottom: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; background: linear-gradient(to right, #3b82f6, #d946ef); -webkit-background-clip: text; background-clip: text; color: transparent;">
        FloDrama
      </h1>
      <div class="loading-spinner"></div>
    </div>
  </div>

  <!-- Script principal de l'application -->
  <script type="module" src="src/main.js"></script>
  
  <!-- Script d'initialisation du mode hybride -->
  <script>
    // Attendre le chargement complet du DOM
    document.addEventListener('DOMContentLoaded', function() {
      // Vérifier si la page d'accueil dynamique doit être utilisée par défaut
      const useHybridMode = true; // Par défaut, utiliser le mode hybride
      
      // Vérifier si le système hybride est disponible
      const checkHybridSystem = () => {
        if (window.FloDrama && window.FloDrama.hybridContentService) {
          console.log('Système hybride détecté - activation du mode dynamique');
          initHybridMode();
        } else {
          console.log('Système hybride non disponible - nouvelle tentative dans 1 seconde');
          setTimeout(checkHybridSystem, 1000);
        }
      };
      
      // Initialiser le mode hybride
      const initHybridMode = () => {
        try {
          // Masquer l'écran de chargement
          const root = document.getElementById('root');
          if (!root) return;
          
          // Vérifier si React est disponible
          if (!window.React || !window.ReactDOM) {
            console.error('React n\'est pas disponible - Utilisation du mode standard');
            root.innerHTML = '';
            root.appendChild(createApp());
            return;
          }
          
          // Créer une racine React
          const reactRoot = ReactDOM.createRoot(root);
          
          // Rendre la page d'accueil hybride
          reactRoot.render(
            React.createElement(window.FloDrama.HybridHomePage)
          );
          
          console.log('Page d\'accueil hybride FloDrama initialisée avec succès');
        } catch (error) {
          console.error('Erreur lors de l\'initialisation du mode hybride:', error);
          // Fallback sur le mode standard
          const root = document.getElementById('root');
          root.innerHTML = '';
          root.appendChild(createApp());
        }
      };
      
      // Vérifier si le système hybride est disponible
      if (useHybridMode) {
        checkHybridSystem();
      } else {
        // Utiliser l'interface standard
        setTimeout(() => {
          const root = document.getElementById('root');
          root.innerHTML = '';
          root.appendChild(createApp());
        }, 1500);
      }
    });
  </script>

  <!-- Script de l'application standard (fallback) -->
  <script>
    function createApp() {
      // Utiliser les données locales au lieu d'essayer de charger depuis des APIs
      const featuredContent = LOCAL_CONTENT.featuredContent;
      const dramasList = LOCAL_CONTENT.dramasList;
      const moviesList = LOCAL_CONTENT.moviesList;
      
      // Créer la structure de l'application
      const appContainer = document.createElement('div');
      appContainer.className = 'app-container';
      
      // Créer le header
      const header = document.createElement('header');
      header.className = 'header';
      
      const logo = document.createElement('div');
      logo.className = 'logo';
      
      const logoIcon = document.createElement('div');
      logoIcon.className = 'logo-icon';
      logoIcon.textContent = 'FD';
      
      logo.appendChild(logoIcon);
      logo.appendChild(document.createTextNode('FloDrama'));
      
      const nav = document.createElement('nav');
      nav.className = 'nav';
      
      // Ajouter les éléments de navigation
      categories.forEach(category => {
        const navItem = document.createElement('div');
        navItem.className = 'nav-item' + (category.active ? ' active' : '');
        navItem.textContent = category.name;
        navItem.dataset.id = category.id;
        
        // Ajouter l'événement de clic
        navItem.addEventListener('click', () => {
          // Désactiver tous les éléments
          document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
          });
          
          // Activer l'élément cliqué
          navItem.classList.add('active');
        });
        
        nav.appendChild(navItem);
      });
      
      header.appendChild(logo);
      header.appendChild(nav);
      
      // Créer le contenu principal
      const mainContent = document.createElement('main');
      mainContent.className = 'main-content';
      
      // Créer le héros
      const hero = document.createElement('div');
      hero.className = 'hero fade-in';
      
      const heroImage = document.createElement('img');
      heroImage.className = 'hero-image';
      heroImage.src = 'images/crash-landing-on-you.jpg';
      heroImage.alt = 'Crash Landing on You';
      
      const heroContent = document.createElement('div');
      heroContent.className = 'hero-content';
      
      const heroTitle = document.createElement('h2');
      heroTitle.className = 'hero-title';
      heroTitle.textContent = 'Crash Landing on You';
      
      const heroDescription = document.createElement('p');
      heroDescription.className = 'hero-description';
      heroDescription.textContent = 'Une héritière sud-coréenne atterrit accidentellement en Corée du Nord après un accident de parapente. Elle y rencontre un officier nord-coréen qui décide de l\'aider à rentrer chez elle.';
      
      const heroButton = document.createElement('button');
      heroButton.className = 'hero-button';
      heroButton.textContent = 'Regarder maintenant';
      
      heroContent.appendChild(heroTitle);
      heroContent.appendChild(heroDescription);
      heroContent.appendChild(heroButton);
      
      hero.appendChild(heroImage);
      hero.appendChild(heroContent);
      
      // Créer la section des dramas populaires
      const popularSection = document.createElement('section');
      popularSection.className = 'fade-in';
      popularSection.style.animationDelay = '0.2s';
      
      const popularTitle = document.createElement('h3');
      popularTitle.className = 'section-title';
      popularTitle.textContent = 'Dramas populaires';
      
      const popularGrid = document.createElement('div');
      popularGrid.className = 'card-grid';
      
      // Créer une carte pour chaque drama
      dramasList.forEach(drama => {
        const card = document.createElement('div');
        card.className = 'card fade-in';
        
        const cardImageContainer = document.createElement('div');
        cardImageContainer.className = 'card-image-container';
        
        const cardImage = document.createElement('img');
        cardImage.className = 'card-image';
        cardImage.src = drama.image || getOptimizedImageUrl(`images/posters/${drama.id}.jpg`);
        cardImage.alt = drama.title;
        
        cardImageContainer.appendChild(cardImage);
        
        const cardOverlay = document.createElement('div');
        cardOverlay.className = 'card-overlay';
        
        const cardContent = document.createElement('div');
        cardContent.className = 'card-content';
        
        const cardTitle = document.createElement('div');
        cardTitle.className = 'card-title';
        cardTitle.textContent = drama.title;
        
        const cardInfo = document.createElement('div');
        cardInfo.className = 'card-info';
        
        const cardYear = document.createElement('span');
        cardYear.className = 'card-year';
        cardYear.textContent = drama.year;
        
        const cardCountry = document.createElement('span');
        cardCountry.className = 'card-country';
        cardCountry.textContent = drama.country;
        
        cardInfo.appendChild(cardYear);
        cardInfo.appendChild(cardCountry);
        
        cardContent.appendChild(cardTitle);
        cardContent.appendChild(cardInfo);
        
        cardOverlay.appendChild(cardContent);
        
        // Ajouter un badge "Nouveau" si applicable
        if (drama.isNew) {
          const cardBadge = document.createElement('div');
          cardBadge.className = 'card-badge';
          cardBadge.textContent = 'Nouveau';
          card.appendChild(cardBadge);
        }
        
        // Ajouter le bouton de lecture
        const cardPlayButton = document.createElement('div');
        cardPlayButton.className = 'card-play-button';
        
        const playIcon = document.createElement('div');
        playIcon.className = 'play-icon';
        
        cardPlayButton.appendChild(playIcon);
        
        // Ajouter les événements
        card.addEventListener('click', () => {
          console.log(`Drama sélectionné: ${drama.title}`);
          // Ici, vous pourriez implémenter la navigation vers la page de détail
        });
        
        card.appendChild(cardImageContainer);
        card.appendChild(cardOverlay);
        card.appendChild(cardPlayButton);
        
        popularGrid.appendChild(card);
      });
      
      popularSection.appendChild(popularTitle);
      popularSection.appendChild(popularGrid);
      
      // Créer le footer
      const footer = document.createElement('footer');
      footer.className = 'footer';
      
      const footerLogo = document.createElement('div');
      footerLogo.className = 'footer-logo';
      footerLogo.textContent = 'FloDrama';
      
      const footerLinks = document.createElement('div');
      footerLinks.className = 'footer-links';
      
      const links = ['À propos', 'Conditions d\'utilisation', 'Confidentialité', 'Contact'];
      links.forEach(link => {
        const footerLink = document.createElement('div');
        footerLink.className = 'footer-link';
        footerLink.textContent = link;
        footerLinks.appendChild(footerLink);
      });
      
      const footerCopyright = document.createElement('div');
      footerCopyright.className = 'footer-copyright';
      footerCopyright.textContent = ' 2025 FloDrama. Tous droits réservés.';
      
      footer.appendChild(footerLogo);
      footer.appendChild(footerLinks);
      footer.appendChild(footerCopyright);
      
      // Assembler l'application
      mainContent.appendChild(hero);
      mainContent.appendChild(popularSection);
      
      appContainer.appendChild(header);
      appContainer.appendChild(mainContent);
      appContainer.appendChild(footer);
      
      return appContainer;
    }
    
    // Ne pas initialiser l'application ici, car elle sera initialisée par le script ci-dessus
  </script>
</body></html>