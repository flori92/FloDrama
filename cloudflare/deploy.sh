#!/bin/bash

# Script de d√©ploiement pour FloDrama sur Cloudflare
# Ce script d√©ploie l'ensemble de l'application FloDrama sur Cloudflare

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher un message de succ√®s
success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fonction pour afficher un avertissement
warning() {
  echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# Fonction pour afficher une erreur
error() {
  echo -e "${RED}‚ùå $1${NC}"
  exit 1
}

# V√©rification des pr√©requis
echo "üîç V√©rification des pr√©requis..."

# V√©rifier si Wrangler est install√©
if ! command -v wrangler &> /dev/null; then
  warning "Wrangler n'est pas install√©. Installation en cours..."
  npm install -g wrangler
  if [ $? -ne 0 ]; then
    error "√âchec de l'installation de Wrangler. Veuillez l'installer manuellement."
  fi
  success "Wrangler install√© avec succ√®s."
else
  success "Wrangler est d√©j√† install√©."
fi

# V√©rifier si l'utilisateur est connect√© √† Cloudflare
echo "üîë V√©rification de la connexion √† Cloudflare..."
WHOAMI_OUTPUT=$(wrangler whoami 2>&1)
if [[ $WHOAMI_OUTPUT == *"Error"* ]] || [[ $WHOAMI_OUTPUT == *"not logged in"* ]]; then
  warning "Vous n'√™tes pas connect√© √† Cloudflare. Connexion en cours..."
  wrangler login
  if [ $? -ne 0 ]; then
    error "√âchec de la connexion √† Cloudflare. Veuillez vous connecter manuellement avec 'wrangler login'."
  fi
  success "Connect√© √† Cloudflare avec succ√®s."
else
  success "D√©j√† connect√© √† Cloudflare."
fi

# Cr√©ation des ressources Cloudflare
echo "üèóÔ∏è Cr√©ation des ressources Cloudflare..."

# V√©rifier/cr√©er la base de donn√©es D1
echo "üóÑÔ∏è V√©rification de la base de donn√©es D1..."
D1_LIST=$(wrangler d1 list --json 2>&1)
if [[ $D1_LIST == *"flodrama-db"* ]]; then
  success "Base de donn√©es D1 'flodrama-db' existe d√©j√†."
  # Extraire l'ID de la base de donn√©es
  D1_ID=$(echo $D1_LIST | grep -o '"uuid":"[^"]*"' | grep -o '[^"]*$' | head -1)
  echo "   ID de la base de donn√©es: $D1_ID"
else
  warning "Cr√©ation de la base de donn√©es D1 'flodrama-db'..."
  D1_CREATE=$(wrangler d1 create flodrama-db --json 2>&1)
  if [ $? -ne 0 ]; then
    error "√âchec de la cr√©ation de la base de donn√©es D1. Erreur: $D1_CREATE"
  fi
  D1_ID=$(echo $D1_CREATE | grep -o '"uuid":"[^"]*"' | grep -o '[^"]*$')
  success "Base de donn√©es D1 'flodrama-db' cr√©√©e avec succ√®s. ID: $D1_ID"
fi

# V√©rifier/cr√©er le bucket R2
echo "üì¶ V√©rification du bucket R2..."
R2_LIST=$(wrangler r2 bucket list --json 2>&1)
if [[ $R2_LIST == *"flodrama-storage"* ]]; then
  success "Bucket R2 'flodrama-storage' existe d√©j√†."
else
  warning "Cr√©ation du bucket R2 'flodrama-storage'..."
  R2_CREATE=$(wrangler r2 bucket create flodrama-storage 2>&1)
  # V√©rifier si l'erreur indique que le bucket existe d√©j√†
  if [[ $R2_CREATE == *"already exists"* ]]; then
    success "Bucket R2 'flodrama-storage' existe d√©j√†."
  elif [ $? -ne 0 ]; then
    warning "√âchec de la cr√©ation du bucket R2. Tentative de continuer malgr√© l'erreur: $R2_CREATE"
  else
    success "Bucket R2 'flodrama-storage' cr√©√© avec succ√®s."
  fi
fi

# V√©rifier/cr√©er le namespace KV
echo "üîë V√©rification du namespace KV..."
KV_LIST=$(wrangler kv namespace list 2>&1)
if [[ $KV_LIST == *"FLODRAMA_METADATA"* ]]; then
  success "Namespace KV 'FLODRAMA_METADATA' existe d√©j√†."
  # Extraire l'ID du namespace KV (adaptation pour le nouveau format de sortie)
  KV_ID=$(echo "$KV_LIST" | grep -A 1 "FLODRAMA_METADATA" | grep -o '[a-f0-9]\{32\}' | head -1)
  echo "   ID du namespace KV: $KV_ID"
else
  warning "Cr√©ation du namespace KV 'FLODRAMA_METADATA'..."
  KV_CREATE=$(wrangler kv namespace create FLODRAMA_METADATA 2>&1)
  if [[ $KV_CREATE == *"already exists"* ]]; then
    success "Namespace KV 'FLODRAMA_METADATA' existe d√©j√†."
    # R√©cup√©rer l'ID du namespace existant
    KV_LIST=$(wrangler kv namespace list 2>&1)
    KV_ID=$(echo "$KV_LIST" | grep -A 1 "FLODRAMA_METADATA" | grep -o '[a-f0-9]\{32\}' | head -1)
  elif [ $? -ne 0 ]; then
    warning "√âchec de la cr√©ation du namespace KV. Tentative de continuer: $KV_CREATE"
    # Essayer de r√©cup√©rer l'ID si le namespace existe d√©j√†
    KV_LIST=$(wrangler kv namespace list 2>&1)
    KV_ID=$(echo "$KV_LIST" | grep -A 1 "FLODRAMA_METADATA" | grep -o '[a-f0-9]\{32\}' | head -1)
  else
    # Extraire l'ID du namespace KV (adaptation pour le nouveau format de sortie)
    KV_ID=$(echo "$KV_CREATE" | grep -o '[a-f0-9]\{32\}' | head -1)
    success "Namespace KV 'FLODRAMA_METADATA' cr√©√© avec succ√®s. ID: $KV_ID"
  fi
fi

# Cr√©er un second namespace KV pour les m√©triques si n√©cessaire
echo "üîë V√©rification du namespace KV pour les m√©triques..."
KV_METRICS_LIST=$(wrangler kv namespace list 2>&1)
if [[ $KV_METRICS_LIST == *"FLODRAMA_METRICS"* ]]; then
  success "Namespace KV 'FLODRAMA_METRICS' existe d√©j√†."
  # Extraire l'ID du namespace KV (adaptation pour le nouveau format de sortie)
  KV_METRICS_ID=$(echo "$KV_METRICS_LIST" | grep -A 1 "FLODRAMA_METRICS" | grep -o '[a-f0-9]\{32\}' | head -1)
  echo "   ID du namespace KV m√©triques: $KV_METRICS_ID"
else
  warning "Cr√©ation du namespace KV 'FLODRAMA_METRICS'..."
  KV_METRICS_CREATE=$(wrangler kv namespace create FLODRAMA_METRICS 2>&1)
  if [[ $KV_METRICS_CREATE == *"already exists"* ]]; then
    success "Namespace KV 'FLODRAMA_METRICS' existe d√©j√†."
    # R√©cup√©rer l'ID du namespace existant
    KV_METRICS_LIST=$(wrangler kv namespace list 2>&1)
    KV_METRICS_ID=$(echo "$KV_METRICS_LIST" | grep -A 1 "FLODRAMA_METRICS" | grep -o '[a-f0-9]\{32\}' | head -1)
  elif [ $? -ne 0 ]; then
    warning "√âchec de la cr√©ation du namespace KV pour les m√©triques. Tentative de continuer: $KV_METRICS_CREATE"
    # Essayer de r√©cup√©rer l'ID si le namespace existe d√©j√†
    KV_METRICS_LIST=$(wrangler kv namespace list 2>&1)
    KV_METRICS_ID=$(echo "$KV_METRICS_LIST" | grep -A 1 "FLODRAMA_METRICS" | grep -o '[a-f0-9]\{32\}' | head -1)
  else
    # Extraire l'ID du namespace KV (adaptation pour le nouveau format de sortie)
    KV_METRICS_ID=$(echo "$KV_METRICS_CREATE" | grep -o '[a-f0-9]\{32\}' | head -1)
    success "Namespace KV 'FLODRAMA_METRICS' cr√©√© avec succ√®s. ID: $KV_METRICS_ID"
  fi
fi

# Mettre √† jour les fichiers de configuration
echo "üìù Mise √† jour des fichiers de configuration..."

# Mettre √† jour wrangler.toml du backend
echo "   Mise √† jour de backend/wrangler.toml..."
sed -i '' "s/# database_id = \"\"/database_id = \"$D1_ID\"/" backend/wrangler.toml
sed -i '' "s/# \[\[d1_databases\]\]/[[d1_databases]]/" backend/wrangler.toml
sed -i '' "s/# binding = \"DB\"/binding = \"DB\"/" backend/wrangler.toml
sed -i '' "s/# database_name = \"flodrama-db\"/database_name = \"flodrama-db\"/" backend/wrangler.toml

# Mettre √† jour wrangler.toml du scraper
echo "   Mise √† jour de scraping/wrangler.toml..."
sed -i '' "s/# database_id = \"\"/database_id = \"$D1_ID\"/" scraping/wrangler.toml
sed -i '' "s/# \[\[d1_databases\]\]/[[d1_databases]]/" scraping/wrangler.toml
sed -i '' "s/# binding = \"DB\"/binding = \"DB\"/" scraping/wrangler.toml
sed -i '' "s/# database_name = \"flodrama-db\"/database_name = \"flodrama-db\"/" scraping/wrangler.toml

success "Fichiers de configuration mis √† jour avec succ√®s."

# Initialisation du sch√©ma de la base de donn√©es
echo "üóÉÔ∏è Initialisation du sch√©ma de la base de donn√©es..."
wrangler d1 execute flodrama-db --file=backend/schema.sql
if [ $? -ne 0 ]; then
  error "√âchec de l'initialisation du sch√©ma de la base de donn√©es."
fi
success "Sch√©ma de la base de donn√©es initialis√© avec succ√®s."

# D√©ploiement du backend
echo "üöÄ D√©ploiement du backend..."
cd backend
npm install
if [ $? -ne 0 ]; then
  error "√âchec de l'installation des d√©pendances du backend."
fi

wrangler deploy
if [ $? -ne 0 ]; then
  error "√âchec du d√©ploiement du backend."
fi
success "Backend d√©ploy√© avec succ√®s."
BACKEND_URL=$(wrangler deploy --json | grep -o '"url":"[^"]*"' | grep -o 'https://[^"]*')
echo "   URL du backend: $BACKEND_URL"
cd ..

# D√©ploiement du scraper
echo "üöÄ D√©ploiement du scraper..."
cd scraping
npm install
if [ $? -ne 0 ]; then
  error "√âchec de l'installation des d√©pendances du scraper."
fi

wrangler deploy
if [ $? -ne 0 ]; then
  error "√âchec du d√©ploiement du scraper."
fi
success "Scraper d√©ploy√© avec succ√®s."
SCRAPER_URL=$(wrangler deploy --json | grep -o '"url":"[^"]*"' | grep -o 'https://[^"]*')
echo "   URL du scraper: $SCRAPER_URL"
cd ..

# Mise √† jour de l'URL de l'API dans le frontend
echo "üìù Mise √† jour de l'URL de l'API dans le frontend..."
echo "VITE_API_URL=$BACKEND_URL" > frontend/.env.production
success "URL de l'API mise √† jour dans le frontend."

# D√©ploiement du frontend
echo "üöÄ D√©ploiement du frontend..."
cd frontend
npm install
if [ $? -ne 0 ]; then
  error "√âchec de l'installation des d√©pendances du frontend."
fi

npm run build
if [ $? -ne 0 ]; then
  error "√âchec de la construction du frontend."
fi

# D√©ploiement sur Cloudflare Pages
echo "   D√©ploiement sur Cloudflare Pages..."
wrangler pages publish dist --project-name=flodrama-frontend
if [ $? -ne 0 ]; then
  error "√âchec du d√©ploiement du frontend sur Cloudflare Pages."
fi
success "Frontend d√©ploy√© avec succ√®s."
cd ..

echo ""
echo "üéâ D√©ploiement de FloDrama sur Cloudflare termin√© avec succ√®s!"
echo "   Backend: $BACKEND_URL"
echo "   Scraper: $SCRAPER_URL"
echo "   Frontend: https://flodrama-frontend.pages.dev"
echo ""
echo "Pour configurer un domaine personnalis√©, utilisez le tableau de bord Cloudflare."
