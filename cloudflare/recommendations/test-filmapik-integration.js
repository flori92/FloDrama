/**
 * Script de test pour v√©rifier l'int√©gration de la source FilmApik
 * Ce script v√©rifie la configuration et l'√©tat des donn√©es via l'API Cloudflare
 */

import { getDatabase } from './src/services/database.js';
import { getSourceById } from './src/config/sources.js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

// Charger les variables d'environnement
dotenv.config();

// Configuration
const SOURCE_ID = 'filmapik';
const API_KEY = process.env.CLOUDFLARE_API_KEY || '507f4127285e65f9b4882ea54719cfcd';
const API_ENDPOINT = process.env.API_ENDPOINT || 'https://flodrama-recommendations-prod.florifavi.workers.dev/api';

/**
 * Effectue une requ√™te √† l'API
 * @param {string} endpoint - Point de terminaison de l'API
 * @param {string} method - M√©thode HTTP (GET, POST, etc.)
 * @param {Object} [body] - Corps de la requ√™te (optionnel)
 * @returns {Promise<Object>} R√©ponse de l'API
 */
async function fetchAPI(endpoint, method = 'GET', body = null) {
  const url = `${API_ENDPOINT}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'X-API-Key': API_KEY
    }
  };

  if (body) {
    options.body = JSON.stringify(body);
  }

  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`Erreur HTTP ${response.status}: ${errorData.message || response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error(`Erreur lors de l'appel √† ${endpoint}:`, error);
    throw error;
  }
}

/**
 * Fonction principale de test
 */
async function testFilmApikIntegration() {
  console.log('üöÄ D√©marrage du test d\'int√©gration FilmApik...');
  
  try {
    // 1. V√©rifier la configuration de la source
    console.log('üîç V√©rification de la configuration de la source...');
    const source = getSourceById(SOURCE_ID);
    
    if (!source) {
      throw new Error(`La source ${SOURCE_ID} n'est pas configur√©e`);
    }
    
    console.log(`‚úÖ Source configur√©e: ${source.name} (${source.baseUrl})`);
    
    // 2. V√©rifier l'√©tat du service via l'API
    console.log('üîå V√©rification de l\'√©tat du service...');
    const health = await fetchAPI('/health');
    console.log(`‚úÖ Service op√©rationnel: ${health.status}`);
    
    // 3. R√©cup√©rer les statistiques de la source
    console.log('üìä R√©cup√©ration des statistiques de la source...');
    const stats = await fetchAPI(`/sources/${SOURCE_ID}/stats`);
    
    if (stats.error) {
      console.warn(`‚ö†Ô∏è Aucune donn√©e trouv√©e pour la source: ${stats.message}`);
    } else {
      console.log(`üìä Statistiques pour ${source.name}:`);
      console.log(`- Nombre total de contenus: ${stats.totalItems || 0}`);
      console.log(`- Derni√®re mise √† jour: ${new Date(stats.lastUpdated).toLocaleString() || 'Inconnue'}`);
      
      // 4. R√©cup√©rer un √©chantillon des contenus
      if (stats.totalItems > 0) {
        console.log('üîç R√©cup√©ration d\'un √©chantillon de contenus...');
        const contents = await fetchAPI(`/contents?source=${SOURCE_ID}&limit=5`);
        
        if (contents.data && contents.data.length > 0) {
          console.log('üé¨ Derniers contenus ajout√©s/mis √† jour:');
          contents.data.forEach(item => {
            console.log(`- ${item.title} (${item.release_year}) - ${new Date(item.updated_at).toLocaleString()}`);
          });
        }
      } else {
        console.log('‚ÑπÔ∏è Aucun contenu trouv√© pour cette source. Le scraping a-t-il √©t√© ex√©cut√© ?');
      }
    }
    
    // 5. V√©rifier si le scraping est configur√© dans le workflow
    console.log('‚öôÔ∏è V√©rification de la configuration du scraping...');
    try {
      const scrapingConfig = await fetchAPI(`/scrape/config`);
      const sourceConfig = scrapingConfig.sources?.find(s => s.id === SOURCE_ID);
      
      if (sourceConfig) {
        console.log(`‚úÖ La source est configur√©e pour le scraping (priorit√©: ${sourceConfig.priority || 'par d√©faut'})`);
      } else {
        console.warn(`‚ö†Ô∏è La source n'est pas configur√©e pour le scraping`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer la configuration du scraping:', error.message);
    }
    
    console.log('‚úÖ Test d\'int√©gration termin√© avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test d\'int√©gration:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test
testFilmApikIntegration().catch(console.error);
