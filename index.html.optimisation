<!DOCTYPE html><html lang="fr"><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#3b82f6">
  <meta name="description" content="FloDrama - Votre plateforme de streaming dédiée aux dramas et films asiatiques">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>FloDrama - Streaming de Dramas et Films Asiatiques</title>
  
  <!-- Chargement des styles CSS via des balises link -->
  <link rel="stylesheet" href="src/styles/globals.css">
  <link rel="stylesheet" href="src/styles/animations.css">
  
  <!-- Chargement direct de React depuis un CDN -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  
  <!-- Script de gestion des images avec fallback -->
  <script>
    // Configuration du CDN dans votre application
    const cdnConfig = {
      // Utiliser CloudFront comme CDN principal
      baseUrl: 'https://d2ajqn0zkhdqop.cloudfront.net/',
      // Fallback vers votre bucket S3 si CloudFront est indisponible
      fallbackUrl: 'https://flodrama-assets.s3.eu-west-3.amazonaws.com/',
      // Domaine GitHub Pages comme solution de secours finale
      githubUrl: 'https://votrecompte.github.io/flodrama/images/'
    };

    // Mapping des URLs problématiques vers des images locales
    const problematicUrlPatterns = [
      // Amazon Media
      { pattern: /m\.media-amazon\.com\/images\/M\//, replacement: '/assets/posters/' },
      // Allocine
      { pattern: /fr\.web\.img[0-9]\.acsta\.net\/pictures\//, replacement: '/assets/posters/' },
      // Placeholder.com
      { pattern: /via\.placeholder\.com\/[0-9]+x[0-9]+\//, replacement: '/assets/posters/' },
      // KultScene
      { pattern: /kultscene\.com\/wp-content\/uploads\//, replacement: '/assets/posters/' },
      // Fallback général pour toute URL externe
      { pattern: /^https?:\/\//, replacement: '/assets/posters/' }
    ];

    // Liste des posters locaux disponibles pour le fallback
    const localPosters = [
      'parasite.jpg',
      'squid-game.jpg',
      'minari.jpg',
      'burning.jpg',
      'train-to-busan.jpg',
      'oldboy.jpg',
      'the-handmaiden.jpg',
      'snowpiercer.jpg',
      'memories-of-murder.jpg',
      'mother.jpg'
    ];
    
    // Fonction pour vérifier si une URL est problématique et la remplacer si nécessaire
    function checkAndReplaceProblematicUrl(url) {
      if (!url) return url;
      
      // Vérifier si l'URL correspond à un pattern problématique
      for (const { pattern, replacement } of problematicUrlPatterns) {
        if (pattern.test(url)) {
          // Si c'est un placeholder avec text=, extraire le titre
          if (url.includes('placeholder.com') && url.includes('text=')) {
            const textMatch = url.match(/text=([^&]+)/);
            if (textMatch && textMatch[1]) {
              const title = decodeURIComponent(textMatch[1]).toLowerCase().replace(/\s+/g, '-');
              return `${replacement}${title}.jpg`;
            }
          }
          
          // Sélectionner une image locale aléatoire
          const randomIndex = Math.floor(Math.random() * localPosters.length);
          return `${replacement}${localPosters[randomIndex]}`;
        }
      }
      
      return url;
    }
    
    // Fonction pour charger une image avec gestion des erreurs
    function loadImage(url, imgElement, alt = '') {
      if (!url || !imgElement) return;
      
      // Vérifier si l'URL est problématique et la remplacer si nécessaire
      const checkedUrl = checkAndReplaceProblematicUrl(url);
      
      // Précharger l'image pour vérifier si elle est accessible
      const preloadImg = new Image();
      preloadImg.onload = function() {
        // L'image a été chargée avec succès
        imgElement.src = checkedUrl;
        imgElement.alt = alt;
        imgElement.classList.add('loaded');
      };
      
      preloadImg.onerror = function() {
        console.error(`Erreur de chargement de l'image: ${checkedUrl}`);
        
        // Essayer avec un fallback local
        const fallbackImg = new Image();
        fallbackImg.onload = function() {
          imgElement.src = fallbackImg.src;
          imgElement.alt = alt;
          imgElement.classList.add('loaded');
          imgElement.classList.add('fallback');
        };
        
        fallbackImg.onerror = function() {
          // Si le fallback échoue aussi, utiliser un dégradé CSS
          imgElement.style.background = 'linear-gradient(135deg, #3b82f6, #d946ef)';
          imgElement.alt = alt;
          imgElement.classList.add('fallback');
          imgElement.classList.add('gradient-fallback');
        };
        
        // Essayer avec une image locale aléatoire
        const randomIndex = Math.floor(Math.random() * localPosters.length);
        fallbackImg.src = `/assets/posters/${localPosters[randomIndex]}`;
      };
      
      // Démarrer le chargement
      preloadImg.src = checkedUrl;
    }
    
    // Fonction pour résoudre les chemins d'accès aux ressources
    function resolveAssetPath(path) {
      // Nettoyer le chemin d'entrée
      const cleanPath = path.startsWith('/') ? path.substring(1) : path;
      return cleanPath;
    }
    
    // Exposer les fonctions pour qu'elles soient accessibles globalement
    window.resolveAssetPath = resolveAssetPath;
    window.loadImage = loadImage;
    window.checkAndReplaceProblematicUrl = checkAndReplaceProblematicUrl;
  </script>
  
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
    
    #root {
      height: 100%;
    }
    
    .loading-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: linear-gradient(135deg, #121118 0%, #1A1926 100%);
      color: #f3b4f6;
    }
    
    .loading-logo {
      width: 180px;
      margin-bottom: 20px;
    }
    
    .loading-title {
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 16px;
      font-size: 2.5rem;
      font-weight: 700;
    }
    
    .loading-text {
      font-size: 1.2rem;
      margin-bottom: 24px;
      text-align: center;
      max-width: 500px;
      line-height: 1.5;
    }
    
    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(59, 130, 246, 0.2);
      border-top: 5px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .app-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      background-color: #121118;
      color: white;
    }
    
    .header {
      display: flex;
      align-items: center;
      padding: 1rem 2rem;
      background-color: rgba(0, 0, 0, 0.3);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    .logo {
      display: flex;
      align-items: center;
      font-size: 1.5rem;
      font-weight: bold;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      cursor: pointer;
    }
    
    .logo-icon {
      width: 40px;
      height: 40px;
      margin-right: 10px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
    }
    
    .nav {
      display: flex;
      margin-left: 2rem;
    }
    
    .nav-item {
      margin-right: 1.5rem;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.3s ease, transform 0.3s ease;
      position: relative;
    }
    
    .nav-item:hover {
      opacity: 1;
      transform: translateY(-2px);
    }
    
    .nav-item.active {
      opacity: 1;
      position: relative;
    }
    
    .nav-item.active::after {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 0;
      width: 100%;
      height: 2px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
    }
    
    .main-content {
      flex: 1;
      padding: 2rem;
    }
    
    .hero {
      position: relative;
      height: 500px;
      border-radius: 12px;
      overflow: hidden;
      margin-bottom: 2rem;
      background: linear-gradient(135deg, #1A1926 0%, #121118 100%);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }
    
    .hero-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.6;
      transition: transform 8s ease;
    }
    
    .hero:hover .hero-image {
      transform: scale(1.05);
    }
    
    .hero-content {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      padding: 2rem;
      background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
      z-index: 2;
    }
    
    .hero-title {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      transform: translateY(0);
      transition: transform 0.5s ease;
    }
    
    .hero:hover .hero-title {
      transform: translateY(-5px);
    }
    
    .hero-description {
      font-size: 1rem;
      max-width: 600px;
      margin-bottom: 1rem;
      opacity: 0.9;
      transform: translateY(0);
      transition: transform 0.5s ease 0.1s;
    }
    
    .hero:hover .hero-description {
      transform: translateY(-5px);
    }
    
    .hero-button {
      background: linear-gradient(to right, #3b82f6, #d946ef);
      border: none;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 24px;
      cursor: pointer;
      font-weight: bold;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      transform: translateY(0);
      transition: transform 0.5s ease 0.2s, box-shadow 0.3s ease;
    }
    
    .hero:hover .hero-button {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(217, 70, 239, 0.4);
    }
    
    .section-title {
      font-size: 1.5rem;
      margin-bottom: 1rem;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      display: inline-block;
    }
    
    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .card {
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      cursor: pointer;
      background-color: #1A1926;
      height: 100%;
    }
    
    .card:hover {
      transform: translateY(-5px) scale(1.02);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
      z-index: 10;
    }
    
    .card-image-container {
      position: relative;
      width: 100%;
      aspect-ratio: 2/3;
      overflow: hidden;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(217, 70, 239, 0.2));
    }
    
    .card-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }
    
    .card:hover .card-image {
      transform: scale(1.1);
    }
    
    .card-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 70%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .card:hover .card-overlay {
      opacity: 1;
    }
    
    .card-content {
      padding: 1rem;
      position: relative;
      z-index: 2;
    }
    
    .card-title {
      font-size: 1rem;
      margin-bottom: 0.5rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color 0.3s ease;
    }
    
    .card:hover .card-title {
      color: #d946ef;
    }
    
    .card-info {
      display: flex;
      font-size: 0.8rem;
      opacity: 0.7;
    }
    
    .card-year {
      margin-right: 1rem;
    }
    
    .card-badge {
      position: absolute;
      top: 10px;
      right: 10px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.7rem;
      font-weight: bold;
      opacity: 0;
      transform: translateY(-10px);
      transition: opacity 0.3s ease, transform 0.3s ease;
      z-index: 5;
    }
    
    .card:hover .card-badge {
      opacity: 1;
      transform: translateY(0);
    }
    
    .card-play-button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
      width: 50px;
      height: 50px;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: opacity 0.3s ease, transform 0.3s ease;
      z-index: 5;
    }
    
    .card:hover .card-play-button {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
    
    .play-icon {
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 8px 0 8px 16px;
      border-color: transparent transparent transparent white;
      margin-left: 3px;
    }
    
    .footer {
      padding: 2rem;
      background-color: rgba(0, 0, 0, 0.3);
      text-align: center;
    }
    
    .footer-logo {
      font-size: 1.5rem;
      font-weight: bold;
      background: linear-gradient(to right, #3b82f6, #d946ef);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 1rem;
      display: inline-block;
    }
    
    .footer-links {
      display: flex;
      justify-content: center;
      margin-bottom: 1rem;
    }
    
    .footer-link {
      margin: 0 1rem;
      opacity: 0.7;
      cursor: pointer;
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
    
    .footer-link:hover {
      opacity: 1;
      transform: translateY(-2px);
    }
    
    .footer-copyright {
      opacity: 0.5;
      font-size: 0.8rem;
    }
    
    /* Ajout d'animations et transitions */
    .fade-in {
      animation: fadeIn 0.5s ease forwards;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Styles pour le lazy loading des images */
    .lazy-image-container {
      position: relative;
      overflow: hidden;
      background-color: #1A1926;
      width: 100%;
      height: 100%;
    }
    
    .lazy-image-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to bottom, #d946ef, #8b5cf6, #3b82f6);
      opacity: 1;
      transition: opacity 0.3s ease;
      animation: pulse 1.5s ease-in-out infinite alternate;
    }
    
    @keyframes pulse {
      0% { opacity: 0.6; }
      100% { opacity: 0.8; }
    }
    
    .lazy-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .lazy-image.loaded {
      opacity: 1;
    }
    
    .lazy-image.loaded + .lazy-image-placeholder {
      opacity: 0;
    }
  </style>
  <link rel="preload" href="images/posters/crash-landing-on-you.jpg" as="image">
  <link rel="preload" href="images/posters/goblin.jpg" as="image">
  <link rel="preload" href="images/posters/itaewon-class.jpg" as="image">
</head>
<body>
  <div id="root">
    <div class="loading-container">
      <svg width="180" height="180" viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg" class="loading-logo">
        <rect width="512" height="512" rx="128" fill="#121118"></rect>
        <path d="M128 128h256v256H128z" fill="url(#paint0_linear)"></path>
        <path d="M192 224c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32h-64c-17.7 0-32-14.3-32-32v-64z" fill="#121118"></path>
        <defs>
          <linearGradient id="paint0_linear" x1="128" y1="128" x2="384" y2="384" gradientUnits="userSpaceOnUse">
            <stop stop-color="#3b82f6"></stop>
            <stop offset="1" stop-color="#d946ef"></stop>
          </linearGradient>
        </defs>
      </svg>
      
      <h1 class="loading-title">FloDrama</h1>
      <p class="loading-text">Chargement de votre expérience personnalisée...</p>
      <div class="loading-spinner"></div>
    </div>
  </div>
  
  <script>
    // Données de démonstration
    const dramaData = [
      {
        id: 1,
        title: "Crash Landing on You",
        year: 2019,
        country: "Corée du Sud",
        image: "images/posters/crash-landing-on-you.jpg",
        fallbackImage: "images/posters/crash-landing-on-you-alt.jpg",
        description: "Une héritière sud-coréenne atterrit accidentellement en Corée du Nord après un accident de parapente.",
        isNew: true,
        rating: 9.2,
        genres: ["Romance", "Drame", "Comédie"]
      },
      {
        id: 2,
        title: "Goblin",
        year: 2016,
        country: "Corée du Sud",
        image: "https://m.media-amazon.com/images/M/MV5BZTg0YmQxZTgtMzgwYi00N2NhLTlkMWYtOWYwNDA1YjkxMmViL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyMzE4MDkyNTA@._V1_FMjpg_UX1000_.jpg",
        fallbackImage: "https://upload.wikimedia.org/wikipedia/en/6/69/Goblin_poster.jpg",
        description: "Un goblin immortel cherche sa fiancée pour mettre fin à sa vie éternelle.",
        isNew: false,
        rating: 8.9,
        genres: ["Fantastique", "Romance", "Drame"]
      },
      {
        id: 3,
        title: "Itaewon Class",
        year: 2020,
        country: "Corée du Sud",
        image: "https://fr.web.img6.acsta.net/pictures/20/01/31/09/48/0616342.jpg",
        fallbackImage: "https://upload.wikimedia.org/wikipedia/en/8/8b/Itaewon_Class.jpg",
        description: "Un ex-détenu et ses amis luttent pour réussir dans le quartier d'Itaewon.",
        isNew: true,
        rating: 8.5,
        genres: ["Drame", "Business"]
      },
      {
        id: 4,
        title: "Reply 1988",
        year: 2015,
        country: "Corée du Sud",
        image: "https://m.media-amazon.com/images/M/MV5BZmI1ZGRhNDYtOGMwNS00MTNiLTg2ZWQtOTQzYjkzYzU2MDI3XkEyXkFqcGdeQXVyMzE4MDkyNTA@._V1_FMjpg_UX1000_.jpg",
        fallbackImage: "https://upload.wikimedia.org/wikipedia/en/5/5a/Reply_1988_Poster.jpg",
        description: "La vie quotidienne de cinq familles et leurs enfants dans un quartier de Séoul en 1988.",
        isNew: false,
        rating: 9.5,
        genres: ["Comédie", "Drame", "Famille"]
      },
      {
        id: 5,
        title: "My Mister",
        year: 2018,
        country: "Corée du Sud",
        image: "https://m.media-amazon.com/images/M/MV5BZTg1ZGEyMzctYjYxMS00NDk3LWJiZDQtMzE3ZWRkYjgwYTVhXkEyXkFqcGdeQXVyNDY5MjMyNTg@._V1_.jpg",
        fallbackImage: "https://upload.wikimedia.org/wikipedia/en/7/7e/My_Mister_poster.jpg",
        description: "L'histoire d'un homme dans la quarantaine et d'une jeune femme qui ont tous deux été blessés par la vie.",
        isNew: false,
        rating: 9.3,
        genres: ["Drame", "Vie quotidienne"]
      },
      {
        id: 6,
        title: "Kingdom",
        year: 2019,
        country: "Corée du Sud",
        image: "https://fr.web.img2.acsta.net/pictures/19/01/25/11/39/2348073.jpg",
        fallbackImage: "https://upload.wikimedia.org/wikipedia/en/0/0c/Kingdom_TV_series.jpg",
        description: "Dans la Corée médiévale, un prince héritier enquête sur une mystérieuse épidémie.",
        isNew: true,
        rating: 8.8,
        genres: ["Historique", "Horreur", "Action"]
      }
    ];
    
    // Catégories de navigation
    const categories = [
      { id: 'home', name: 'Accueil', active: true },
      { id: 'dramas', name: 'Dramas', active: false },
      { id: 'films', name: 'Films', active: false },
      { id: 'nouveautes', name: 'Nouveautés', active: false },
      { id: 'ma-liste', name: 'Ma Liste', active: false }
    ];
    
    // Fonction pour créer l'application
    function createApp() {
      // Créer la structure de l'application
      const appContainer = document.createElement('div');
      appContainer.className = 'app-container';
      
      // Créer le header
      const header = document.createElement('header');
      header.className = 'header';
      
      const logo = document.createElement('div');
      logo.className = 'logo';
      
      const logoIcon = document.createElement('div');
      logoIcon.className = 'logo-icon';
      logoIcon.textContent = 'FD';
      
      logo.appendChild(logoIcon);
      logo.appendChild(document.createTextNode('FloDrama'));
      
      const nav = document.createElement('nav');
      nav.className = 'nav';
      
      // Ajouter les éléments de navigation
      categories.forEach(category => {
        const navItem = document.createElement('div');
        navItem.className = 'nav-item' + (category.active ? ' active' : '');
        navItem.textContent = category.name;
        navItem.dataset.id = category.id;
        
        // Ajouter l'événement de clic
        navItem.addEventListener('click', () => {
          // Désactiver tous les éléments
          document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
          });
          
          // Activer l'élément cliqué
          navItem.classList.add('active');
        });
        
        nav.appendChild(navItem);
      });
      
      header.appendChild(logo);
      header.appendChild(nav);
      
      // Créer le contenu principal
      const mainContent = document.createElement('main');
      mainContent.className = 'main-content';
      
      // Créer le héros
      const hero = document.createElement('div');
      hero.className = 'hero fade-in';
      
      const heroImage = document.createElement('img');
      heroImage.className = 'hero-image';
      heroImage.src = 'images/crash-landing-on-you.jpg';
      heroImage.alt = 'Crash Landing on You';
      
      const heroContent = document.createElement('div');
      heroContent.className = 'hero-content';
      
      const heroTitle = document.createElement('h2');
      heroTitle.className = 'hero-title';
      heroTitle.textContent = 'Crash Landing on You';
      
      const heroDescription = document.createElement('p');
      heroDescription.className = 'hero-description';
      heroDescription.textContent = 'Une héritière sud-coréenne atterrit accidentellement en Corée du Nord après un accident de parapente. Elle y rencontre un officier nord-coréen qui décide de l\'aider à rentrer chez elle.';
      
      const heroButton = document.createElement('button');
      heroButton.className = 'hero-button';
      heroButton.textContent = 'Regarder maintenant';
      
      heroContent.appendChild(heroTitle);
      heroContent.appendChild(heroDescription);
      heroContent.appendChild(heroButton);
      
      hero.appendChild(heroImage);
      hero.appendChild(heroContent);
      
      // Créer la section des dramas populaires
      const popularSection = document.createElement('section');
      popularSection.className = 'fade-in';
      popularSection.style.animationDelay = '0.2s';
      
      const popularTitle = document.createElement('h3');
      popularTitle.className = 'section-title';
      popularTitle.textContent = 'Dramas populaires';
      
      const popularGrid = document.createElement('div');
      popularGrid.className = 'card-grid';
      
      // Créer une carte pour chaque drama
      dramaData.forEach(drama => {
        const card = document.createElement('div');
        card.className = 'card fade-in';
        
        const cardImageContainer = document.createElement('div');
        cardImageContainer.className = 'card-image-container';
        
        const cardImage = document.createElement('img');
        cardImage.className = 'card-image';
        cardImage.setAttribute('data-original-src', drama.image);
        cardImage.alt = drama.title;
        
        // Utiliser notre système de gestion d'images avec fallback
        loadImage(drama.image, cardImage, drama.title);
        
        cardImageContainer.appendChild(cardImage);
        
        const cardOverlay = document.createElement('div');
        cardOverlay.className = 'card-overlay';
        
        const cardContent = document.createElement('div');
        cardContent.className = 'card-content';
        
        const cardTitle = document.createElement('div');
        cardTitle.className = 'card-title';
        cardTitle.textContent = drama.title;
        
        const cardInfo = document.createElement('div');
        cardInfo.className = 'card-info';
        
        const cardYear = document.createElement('span');
        cardYear.className = 'card-year';
        cardYear.textContent = drama.year;
        
        const cardCountry = document.createElement('span');
        cardCountry.className = 'card-country';
        cardCountry.textContent = drama.country;
        
        cardInfo.appendChild(cardYear);
        cardInfo.appendChild(cardCountry);
        
        cardContent.appendChild(cardTitle);
        cardContent.appendChild(cardInfo);
        
        // Ajouter les genres
        if (drama.genres && drama.genres.length > 0) {
          const cardGenres = document.createElement('div');
          cardGenres.className = 'card-genres';
          cardGenres.style.fontSize = '0.7rem';
          cardGenres.style.marginTop = '0.5rem';
          cardGenres.style.opacity = '0.7';
          cardGenres.textContent = drama.genres.join(' • ');
          
          cardContent.appendChild(cardGenres);
        }
        
        cardOverlay.appendChild(cardContent);
        
        // Ajouter un badge "Nouveau" si applicable
        if (drama.isNew) {
          const cardBadge = document.createElement('div');
          cardBadge.className = 'card-badge';
          cardBadge.textContent = 'Nouveau';
          card.appendChild(cardBadge);
        }
        
        // Ajouter le bouton de lecture
        const cardPlayButton = document.createElement('div');
        cardPlayButton.className = 'card-play-button';
        
        const playIcon = document.createElement('div');
        playIcon.className = 'play-icon';
        
        cardPlayButton.appendChild(playIcon);
        
        // Ajouter les événements
        card.addEventListener('click', () => {
          console.log(`Drama sélectionné: ${drama.title}`);
          // Ici, vous pourriez implémenter la navigation vers la page de détail
        });
        
        card.appendChild(cardImageContainer);
        card.appendChild(cardOverlay);
        card.appendChild(cardPlayButton);
        
        popularGrid.appendChild(card);
      });
      
      popularSection.appendChild(popularTitle);
      popularSection.appendChild(popularGrid);
      
      // Créer le footer
      const footer = document.createElement('footer');
      footer.className = 'footer';
      
      const footerLogo = document.createElement('div');
      footerLogo.className = 'footer-logo';
      footerLogo.textContent = 'FloDrama';
      
      const footerLinks = document.createElement('div');
      footerLinks.className = 'footer-links';
      
      const links = ['À propos', 'Conditions d\'utilisation', 'Confidentialité', 'Contact'];
      links.forEach(link => {
        const footerLink = document.createElement('div');
        footerLink.className = 'footer-link';
        footerLink.textContent = link;
        footerLinks.appendChild(footerLink);
      });
      
      const footerCopyright = document.createElement('div');
      footerCopyright.className = 'footer-copyright';
      footerCopyright.textContent = ' 2025 FloDrama. Tous droits réservés.';
      
      footer.appendChild(footerLogo);
      footer.appendChild(footerLinks);
      footer.appendChild(footerCopyright);
      
      // Assembler l'application
      mainContent.appendChild(hero);
      mainContent.appendChild(popularSection);
      
      appContainer.appendChild(header);
      appContainer.appendChild(mainContent);
      appContainer.appendChild(footer);
      
      return appContainer;
    }
    
    // Initialiser l'application après le chargement de la page
    window.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        const root = document.getElementById('root');
        root.innerHTML = '';
        root.appendChild(createApp());
        
        // Animation d'entrée pour les éléments
        const fadeElements = document.querySelectorAll('.fade-in');
        fadeElements.forEach((el, index) => {
          el.style.opacity = '0';
          setTimeout(() => {
            el.style.opacity = '1';
          }, 100 * index);
        });
      }, 1500); // Afficher le loader pendant 1.5 secondes
    });
  </script>
</body></html>